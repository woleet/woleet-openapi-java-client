/*
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.12.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.api.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SignatureVerificationStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SignatureVerificationStatus {
  /**
   * Signature verification status code:&lt;br&gt; - VERIFIED: success: the receipt&#39;s &#x60;signature&#x60; property is a valid signature of &#x60;signedHash&#x60;, or, if any of &#x60;signedIdentity&#x60; or &#x60;signedIssuerDomain&#x60; is provided, a valid signature of SHA256(&#x60;signedHash&#x60; + &#x60;signedIdentity&#x60; + &#x60;signedIssuerDomain&#x60;) using the public key &#x60;pubKey&#x60;.&lt;br&gt; - SIGNATURE_MISMATCH_RECEIPT: error: the receipt&#39;s &#x60;targetHash&#x60; does not match the SHA256 hash of &#x60;signature&#x60;.&lt;br&gt; - INVALID_SIGNATURE: error: the receipt&#39;s &#x60;signature&#x60; property is invalid. 
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    VERIFIED("VERIFIED"),
    
    INVALID_SIGNATURE("INVALID_SIGNATURE"),
    
    SIGNATURE_MISMATCH_RECEIPT("SIGNATURE_MISMATCH_RECEIPT");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;


  public SignatureVerificationStatus code(CodeEnum code) {
    
    this.code = code;
    return this;
  }

   /**
   * Signature verification status code:&lt;br&gt; - VERIFIED: success: the receipt&#39;s &#x60;signature&#x60; property is a valid signature of &#x60;signedHash&#x60;, or, if any of &#x60;signedIdentity&#x60; or &#x60;signedIssuerDomain&#x60; is provided, a valid signature of SHA256(&#x60;signedHash&#x60; + &#x60;signedIdentity&#x60; + &#x60;signedIssuerDomain&#x60;) using the public key &#x60;pubKey&#x60;.&lt;br&gt; - SIGNATURE_MISMATCH_RECEIPT: error: the receipt&#39;s &#x60;targetHash&#x60; does not match the SHA256 hash of &#x60;signature&#x60;.&lt;br&gt; - INVALID_SIGNATURE: error: the receipt&#39;s &#x60;signature&#x60; property is invalid. 
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signature verification status code:<br> - VERIFIED: success: the receipt's `signature` property is a valid signature of `signedHash`, or, if any of `signedIdentity` or `signedIssuerDomain` is provided, a valid signature of SHA256(`signedHash` + `signedIdentity` + `signedIssuerDomain`) using the public key `pubKey`.<br> - SIGNATURE_MISMATCH_RECEIPT: error: the receipt's `targetHash` does not match the SHA256 hash of `signature`.<br> - INVALID_SIGNATURE: error: the receipt's `signature` property is invalid. ")

  public CodeEnum getCode() {
    return code;
  }


  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public SignatureVerificationStatus text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Signature verification status text (gives more insights about the verification process).
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signature verification status text (gives more insights about the verification process).")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureVerificationStatus signatureVerificationStatus = (SignatureVerificationStatus) o;
    return Objects.equals(this.code, signatureVerificationStatus.code) &&
        Objects.equals(this.text, signatureVerificationStatus.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureVerificationStatus {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

