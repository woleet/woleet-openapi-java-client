/*
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/v1.5.1/reference)** before reading this documentation. 
 *
 * OpenAPI spec version: 1.5.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.woleet.api.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.woleet.api.client.model.Anchor;
import io.woleet.api.client.model.AuthorizedSignee;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SignatureRequest
 */

public class SignatureRequest {
  @SerializedName("id")
  private String id = null;

  @SerializedName("created")
  private Long created = null;

  @SerializedName("lastModified")
  private Long lastModified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("suspended")
  private Boolean suspended = null;

  @SerializedName("hashToSign")
  private String hashToSign = null;

  @SerializedName("anchors")
  private List<Anchor> anchors = null;

  @SerializedName("deadline")
  private Long deadline = null;

  @SerializedName("maxSignatures")
  private Integer maxSignatures = null;

  @SerializedName("authorizedSignees")
  private List<AuthorizedSignee> authorizedSignees = null;

   /**
   * Signature request identifier. It is allocated by the platform, and so must not be provided at creation time. 
   * @return id
  **/
  @ApiModelProperty(value = "Signature request identifier. It is allocated by the platform, and so must not be provided at creation time. ")
  public String getId() {
    return id;
  }

   /**
   * Date of creation (in milliseconds since Unix epoch). 
   * @return created
  **/
  @ApiModelProperty(value = "Date of creation (in milliseconds since Unix epoch). ")
  public Long getCreated() {
    return created;
  }

   /**
   * Date of last modification (in milliseconds since Unix epoch). 
   * @return lastModified
  **/
  @ApiModelProperty(value = "Date of last modification (in milliseconds since Unix epoch). ")
  public Long getLastModified() {
    return lastModified;
  }

  public SignatureRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the signature request (doesn&#39;t need to be unique). 
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Name of the signature request (doesn't need to be unique). ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public SignatureRequest suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

   /**
   * &#x60;true&#x60; if the signature request is suspended, or &#x60;false&#x60; (or unset) if not.&lt;br&gt; When suspended, no more signature can be registered before the request is resumed. 
   * @return suspended
  **/
  @ApiModelProperty(value = "`true` if the signature request is suspended, or `false` (or unset) if not.<br> When suspended, no more signature can be registered before the request is resumed. ")
  public Boolean isSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }

  public SignatureRequest hashToSign(String hashToSign) {
    this.hashToSign = hashToSign;
    return this;
  }

   /**
   * SHA256 hash (ie. the fingerprint) of the original data to sign. 
   * @return hashToSign
  **/
  @ApiModelProperty(required = true, value = "SHA256 hash (ie. the fingerprint) of the original data to sign. ")
  public String getHashToSign() {
    return hashToSign;
  }

  public void setHashToSign(String hashToSign) {
    this.hashToSign = hashToSign;
  }

  public SignatureRequest anchors(List<Anchor> anchors) {
    this.anchors = anchors;
    return this;
  }

  public SignatureRequest addAnchorsItem(Anchor anchorsItem) {
    if (this.anchors == null) {
      this.anchors = new ArrayList<Anchor>();
    }
    this.anchors.add(anchorsItem);
    return this;
  }

   /**
   * List of signature anchors created for this signature request.&lt;br&gt; This property is only available to the owner of the signature request. 
   * @return anchors
  **/
  @ApiModelProperty(value = "List of signature anchors created for this signature request.<br> This property is only available to the owner of the signature request. ")
  public List<Anchor> getAnchors() {
    return anchors;
  }

  public void setAnchors(List<Anchor> anchors) {
    this.anchors = anchors;
  }

  public SignatureRequest deadline(Long deadline) {
    this.deadline = deadline;
    return this;
  }

   /**
   * Deadline of the signature request (in milliseconds since Unix epoch).&lt;br&gt; When not set, null or 0, no deadline is applied.&lt;br&gt; If set, signatures registered after the deadline are refused. 
   * @return deadline
  **/
  @ApiModelProperty(value = "Deadline of the signature request (in milliseconds since Unix epoch).<br> When not set, null or 0, no deadline is applied.<br> If set, signatures registered after the deadline are refused. ")
  public Long getDeadline() {
    return deadline;
  }

  public void setDeadline(Long deadline) {
    this.deadline = deadline;
  }

  public SignatureRequest maxSignatures(Integer maxSignatures) {
    this.maxSignatures = maxSignatures;
    return this;
  }

   /**
   * Maximum number of signatures to accept for this signature request.&lt;br&gt; When not set, null or 0, no maximum is applied.&lt;br&gt; If set, signatures coming from signees not in this list are refused.&lt;br&gt; This property and the &#x60;authorizedSignees&#x60; property are mutually exclusive.&lt;br&gt; This property is only available to the owner of the signature request. 
   * @return maxSignatures
  **/
  @ApiModelProperty(value = "Maximum number of signatures to accept for this signature request.<br> When not set, null or 0, no maximum is applied.<br> If set, signatures coming from signees not in this list are refused.<br> This property and the `authorizedSignees` property are mutually exclusive.<br> This property is only available to the owner of the signature request. ")
  public Integer getMaxSignatures() {
    return maxSignatures;
  }

  public void setMaxSignatures(Integer maxSignatures) {
    this.maxSignatures = maxSignatures;
  }

  public SignatureRequest authorizedSignees(List<AuthorizedSignee> authorizedSignees) {
    this.authorizedSignees = authorizedSignees;
    return this;
  }

  public SignatureRequest addAuthorizedSigneesItem(AuthorizedSignee authorizedSigneesItem) {
    if (this.authorizedSignees == null) {
      this.authorizedSignees = new ArrayList<AuthorizedSignee>();
    }
    this.authorizedSignees.add(authorizedSigneesItem);
    return this;
  }

   /**
   * List of public keys of all signees authorized to register their signature for this signature request (no duplicate is authorized).&lt;br&gt; **Currently only Bitcoin addresses are supported.**&lt;br&gt; When not set or null, anybody can sign the signature request.&lt;br&gt; If set, signatures from public keys not in this list are rejected.&lt;br&gt; This property and the &#x60;maxSignatures&#x60; property are mutually exclusive.&lt;br&gt; This property is only available to the owner of the signature request. 
   * @return authorizedSignees
  **/
  @ApiModelProperty(value = "List of public keys of all signees authorized to register their signature for this signature request (no duplicate is authorized).<br> **Currently only Bitcoin addresses are supported.**<br> When not set or null, anybody can sign the signature request.<br> If set, signatures from public keys not in this list are rejected.<br> This property and the `maxSignatures` property are mutually exclusive.<br> This property is only available to the owner of the signature request. ")
  public List<AuthorizedSignee> getAuthorizedSignees() {
    return authorizedSignees;
  }

  public void setAuthorizedSignees(List<AuthorizedSignee> authorizedSignees) {
    this.authorizedSignees = authorizedSignees;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignatureRequest signatureRequest = (SignatureRequest) o;
    return Objects.equals(this.id, signatureRequest.id) &&
        Objects.equals(this.created, signatureRequest.created) &&
        Objects.equals(this.lastModified, signatureRequest.lastModified) &&
        Objects.equals(this.name, signatureRequest.name) &&
        Objects.equals(this.suspended, signatureRequest.suspended) &&
        Objects.equals(this.hashToSign, signatureRequest.hashToSign) &&
        Objects.equals(this.anchors, signatureRequest.anchors) &&
        Objects.equals(this.deadline, signatureRequest.deadline) &&
        Objects.equals(this.maxSignatures, signatureRequest.maxSignatures) &&
        Objects.equals(this.authorizedSignees, signatureRequest.authorizedSignees);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, created, lastModified, name, suspended, hashToSign, anchors, deadline, maxSignatures, authorizedSignees);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignatureRequest {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    hashToSign: ").append(toIndentedString(hashToSign)).append("\n");
    sb.append("    anchors: ").append(toIndentedString(anchors)).append("\n");
    sb.append("    deadline: ").append(toIndentedString(deadline)).append("\n");
    sb.append("    maxSignatures: ").append(toIndentedString(maxSignatures)).append("\n");
    sb.append("    authorizedSignees: ").append(toIndentedString(authorizedSignees)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

