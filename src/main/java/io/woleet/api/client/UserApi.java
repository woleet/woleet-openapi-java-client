/*
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.11.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.api.client;

import io.woleet.api.ApiCallback;
import io.woleet.api.ApiClient;
import io.woleet.api.ApiException;
import io.woleet.api.ApiResponse;
import io.woleet.api.Configuration;
import io.woleet.api.Pair;
import io.woleet.api.ProgressRequestBody;
import io.woleet.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.woleet.api.client.model.CallbackSecret;
import io.woleet.api.client.model.Credits;
import io.woleet.api.client.model.Tokens;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteKey
     * @param key The key to delete.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key is deleted.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/key/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteKey(Async)");
        }
        

        okhttp3.Call localVarCall = deleteKeyCall(key, _callback);
        return localVarCall;

    }

    /**
     * Delete a key and its value from the user&#39;s k/v store.
     * 
     * @param key The key to delete.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key is deleted.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteKey(String key) throws ApiException {
        deleteKeyWithHttpInfo(key);
    }

    /**
     * Delete a key and its value from the user&#39;s k/v store.
     * 
     * @param key The key to delete.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key is deleted.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteKeyWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyValidateBeforeCall(key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a key and its value from the user&#39;s k/v store. (asynchronously)
     * 
     * @param key The key to delete.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key is deleted.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyAsync(String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyValidateBeforeCall(key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCallbackSecret
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallbackSecretCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/callbackSecret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallbackSecretValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCallbackSecretCall(_callback);
        return localVarCall;

    }

    /**
     * Get the current callback secret (null if not set).
     * Use this operation to get the API callback secret.
     * @return CallbackSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public CallbackSecret getCallbackSecret() throws ApiException {
        ApiResponse<CallbackSecret> localVarResp = getCallbackSecretWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get the current callback secret (null if not set).
     * Use this operation to get the API callback secret.
     * @return ApiResponse&lt;CallbackSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallbackSecret> getCallbackSecretWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCallbackSecretValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CallbackSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the current callback secret (null if not set). (asynchronously)
     * Use this operation to get the API callback secret.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCallbackSecretAsync(final ApiCallback<CallbackSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallbackSecretValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CallbackSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCredits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remaining signature and anchoring credits. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/credits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCreditsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCreditsCall(_callback);
        return localVarCall;

    }

    /**
     * Get user&#39;s credits.
     * Use this operation to get the remaining signature and anchoring credits of the authenticated user.
     * @return Credits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remaining signature and anchoring credits. </td><td>  -  </td></tr>
     </table>
     */
    public Credits getCredits() throws ApiException {
        ApiResponse<Credits> localVarResp = getCreditsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user&#39;s credits.
     * Use this operation to get the remaining signature and anchoring credits of the authenticated user.
     * @return ApiResponse&lt;Credits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remaining signature and anchoring credits. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Credits> getCreditsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCreditsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user&#39;s credits. (asynchronously)
     * Use this operation to get the remaining signature and anchoring credits of the authenticated user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The remaining signature and anchoring credits. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCreditsAsync(final ApiCallback<Credits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCreditsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Credits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKey
     * @param key The key to read.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyCall(String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/key/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getKey(Async)");
        }
        

        okhttp3.Call localVarCall = getKeyCall(key, _callback);
        return localVarCall;

    }

    /**
     * Read the value of a key from the user&#39;s k/v store.
     * 
     * @param key The key to read.  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public Object getKey(String key) throws ApiException {
        ApiResponse<Object> localVarResp = getKeyWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Read the value of a key from the user&#39;s k/v store.
     * 
     * @param key The key to read.  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getKeyWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getKeyValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Read the value of a key from the user&#39;s k/v store. (asynchronously)
     * 
     * @param key The key to read.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Key not found.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyAsync(String key, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTokens
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens of the user, possibly empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokensCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTokensValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTokensCall(_callback);
        return localVarCall;

    }

    /**
     * Get user&#39;s registered JWT tokens.
     * Use this operation to list all JWT tokens registered for the authenticated user.
     * @return Tokens
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens of the user, possibly empty. </td><td>  -  </td></tr>
     </table>
     */
    public Tokens getTokens() throws ApiException {
        ApiResponse<Tokens> localVarResp = getTokensWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get user&#39;s registered JWT tokens.
     * Use this operation to list all JWT tokens registered for the authenticated user.
     * @return ApiResponse&lt;Tokens&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens of the user, possibly empty. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tokens> getTokensWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTokensValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Tokens>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user&#39;s registered JWT tokens. (asynchronously)
     * Use this operation to list all JWT tokens registered for the authenticated user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens of the user, possibly empty. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTokensAsync(final ApiCallback<Tokens> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTokensValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Tokens>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchKey
     * @param key The key to patch.  (required)
     * @param value The JSON merge patch to apply.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is patched.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchKeyCall(String key, Object value, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/user/key/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchKeyValidateBeforeCall(String key, Object value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling patchKey(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling patchKey(Async)");
        }
        

        okhttp3.Call localVarCall = patchKeyCall(key, value, _callback);
        return localVarCall;

    }

    /**
     * Patch the value of a key in the user&#39;s k/v store.
     * Patch the value of a key in the user&#39;s k/v store using a JSON merge patch (see https://tools.ietf.org/html/rfc7386 for information about JSON merge patch). 
     * @param key The key to patch.  (required)
     * @param value The JSON merge patch to apply.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is patched.  </td><td>  -  </td></tr>
     </table>
     */
    public void patchKey(String key, Object value) throws ApiException {
        patchKeyWithHttpInfo(key, value);
    }

    /**
     * Patch the value of a key in the user&#39;s k/v store.
     * Patch the value of a key in the user&#39;s k/v store using a JSON merge patch (see https://tools.ietf.org/html/rfc7386 for information about JSON merge patch). 
     * @param key The key to patch.  (required)
     * @param value The JSON merge patch to apply.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is patched.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> patchKeyWithHttpInfo(String key, Object value) throws ApiException {
        okhttp3.Call localVarCall = patchKeyValidateBeforeCall(key, value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Patch the value of a key in the user&#39;s k/v store. (asynchronously)
     * Patch the value of a key in the user&#39;s k/v store using a JSON merge patch (see https://tools.ietf.org/html/rfc7386 for information about JSON merge patch). 
     * @param key The key to patch.  (required)
     * @param value The JSON merge patch to apply.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is patched.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchKeyAsync(String key, Object value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchKeyValidateBeforeCall(key, value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postKey
     * @param key The key to create.  (required)
     * @param value The value to store.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is stored.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The key already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKeyCall(String key, Object value, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/user/key/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postKeyValidateBeforeCall(String key, Object value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling postKey(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling postKey(Async)");
        }
        

        okhttp3.Call localVarCall = postKeyCall(key, value, _callback);
        return localVarCall;

    }

    /**
     * Create a new key and store its value in the user&#39;s k/v store.
     * 
     * @param key The key to create.  (required)
     * @param value The value to store.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is stored.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The key already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public void postKey(String key, Object value) throws ApiException {
        postKeyWithHttpInfo(key, value);
    }

    /**
     * Create a new key and store its value in the user&#39;s k/v store.
     * 
     * @param key The key to create.  (required)
     * @param value The value to store.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is stored.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The key already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postKeyWithHttpInfo(String key, Object value) throws ApiException {
        okhttp3.Call localVarCall = postKeyValidateBeforeCall(key, value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a new key and store its value in the user&#39;s k/v store. (asynchronously)
     * 
     * @param key The key to create.  (required)
     * @param value The value to store.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is stored.  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The key already exists.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postKeyAsync(String key, Object value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postKeyValidateBeforeCall(key, value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putKey
     * @param key The key to update.  (required)
     * @param value The value to update.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is updated.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKeyCall(String key, Object value, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = value;

        // create path and map variables
        String localVarPath = "/user/key/{key}"
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putKeyValidateBeforeCall(String key, Object value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putKey(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling putKey(Async)");
        }
        

        okhttp3.Call localVarCall = putKeyCall(key, value, _callback);
        return localVarCall;

    }

    /**
     * Update the value of a key in the user&#39;s k/v store.
     * 
     * @param key The key to update.  (required)
     * @param value The value to update.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is updated.  </td><td>  -  </td></tr>
     </table>
     */
    public void putKey(String key, Object value) throws ApiException {
        putKeyWithHttpInfo(key, value);
    }

    /**
     * Update the value of a key in the user&#39;s k/v store.
     * 
     * @param key The key to update.  (required)
     * @param value The value to update.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is updated.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putKeyWithHttpInfo(String key, Object value) throws ApiException {
        okhttp3.Call localVarCall = putKeyValidateBeforeCall(key, value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update the value of a key in the user&#39;s k/v store. (asynchronously)
     * 
     * @param key The key to update.  (required)
     * @param value The value to update.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The key value is updated.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKeyAsync(String key, Object value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putKeyValidateBeforeCall(key, value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putTokens
     * @param tokens The list of JWT tokens to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTokensCall(Tokens tokens, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tokens;

        // create path and map variables
        String localVarPath = "/user/tokens";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTokensValidateBeforeCall(Tokens tokens, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tokens' is set
        if (tokens == null) {
            throw new ApiException("Missing the required parameter 'tokens' when calling putTokens(Async)");
        }
        

        okhttp3.Call localVarCall = putTokensCall(tokens, _callback);
        return localVarCall;

    }

    /**
     * Update user&#39;s registered JWT tokens.
     * Use this operation to update the list of JWT tokens registered for the authenticated user.
     * @param tokens The list of JWT tokens to update. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public void putTokens(Tokens tokens) throws ApiException {
        putTokensWithHttpInfo(tokens);
    }

    /**
     * Update user&#39;s registered JWT tokens.
     * Use this operation to update the list of JWT tokens registered for the authenticated user.
     * @param tokens The list of JWT tokens to update. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putTokensWithHttpInfo(Tokens tokens) throws ApiException {
        okhttp3.Call localVarCall = putTokensValidateBeforeCall(tokens, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update user&#39;s registered JWT tokens. (asynchronously)
     * Use this operation to update the list of JWT tokens registered for the authenticated user.
     * @param tokens The list of JWT tokens to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of JWT tokens has been successfully updated. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTokensAsync(Tokens tokens, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTokensValidateBeforeCall(tokens, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCallbackSecret
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly generated callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallbackSecretCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/callbackSecret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCallbackSecretValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateCallbackSecretCall(_callback);
        return localVarCall;

    }

    /**
     * Generates a new callback secret.
     * Use this operation to generate the API callback secret.
     * @return CallbackSecret
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly generated callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public CallbackSecret updateCallbackSecret() throws ApiException {
        ApiResponse<CallbackSecret> localVarResp = updateCallbackSecretWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Generates a new callback secret.
     * Use this operation to generate the API callback secret.
     * @return ApiResponse&lt;CallbackSecret&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly generated callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CallbackSecret> updateCallbackSecretWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = updateCallbackSecretValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CallbackSecret>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generates a new callback secret. (asynchronously)
     * Use this operation to generate the API callback secret.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly generated callback secret. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCallbackSecretAsync(final ApiCallback<CallbackSecret> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCallbackSecretValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CallbackSecret>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
