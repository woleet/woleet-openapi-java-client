/*
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * The version of the OpenAPI document: 1.13.0
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.api.client;

import io.woleet.api.ApiCallback;
import io.woleet.api.ApiClient;
import io.woleet.api.ApiException;
import io.woleet.api.ApiResponse;
import io.woleet.api.Configuration;
import io.woleet.api.Pair;
import io.woleet.api.ProgressRequestBody;
import io.woleet.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.woleet.api.client.model.Anchor;
import io.woleet.api.client.model.AnchorIds;
import io.woleet.api.client.model.Anchors;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnchorApi {
    private ApiClient localVarApiClient;

    public AnchorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnchorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createAnchor
     * @param anchor Anchor object to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient credits. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnchorCall(Anchor anchor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = anchor;

        // create path and map variables
        String localVarPath = "/anchor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAnchorValidateBeforeCall(Anchor anchor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'anchor' is set
        if (anchor == null) {
            throw new ApiException("Missing the required parameter 'anchor' when calling createAnchor(Async)");
        }
        

        okhttp3.Call localVarCall = createAnchorCall(anchor, _callback);
        return localVarCall;

    }

    /**
     * Create a new anchor.
     * Use this operation to create a new anchor of one of these two types: - a **data anchor** (to generate a *proof of timestamp* allowing to prove the existence of a data at some point in time) - a **signature anchor** (to generate a *proof of seal* allowing to prove the existence of the signature of a data at some point in time, the validity of the signature and the identity of the signer)  The properties &#x60;id&#x60;, &#x60;created&#x60;, &#x60;lastModified&#x60;, &#x60;status&#x60;, &#x60;timestamp&#x60; and &#x60;confirmations&#x60; are read-only and so must not be provided: they are managed by the platform and added to the returned anchor.&lt;br&gt; For data anchors, only the properties &#x60;name&#x60; and &#x60;hash&#x60; are required: the &#x60;hash&#x60; property must be the SHA256 hash of the data to anchor, and must be computed caller side. This allows not to leak the original data.&lt;br&gt; For signature anchors, only the properties &#x60;name&#x60;, &#x60;signedHash&#x60;, &#x60;signature&#x60; and &#x60;pubKey&#x60; are required.&lt;br&gt; Be sure to have at least 1 timestamp credit (for a data anchor) or 1 seal credit (for a signature anchor). 
     * @param anchor Anchor object to create. (required)
     * @return Anchor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient credits. </td><td>  -  </td></tr>
     </table>
     */
    public Anchor createAnchor(Anchor anchor) throws ApiException {
        ApiResponse<Anchor> localVarResp = createAnchorWithHttpInfo(anchor);
        return localVarResp.getData();
    }

    /**
     * Create a new anchor.
     * Use this operation to create a new anchor of one of these two types: - a **data anchor** (to generate a *proof of timestamp* allowing to prove the existence of a data at some point in time) - a **signature anchor** (to generate a *proof of seal* allowing to prove the existence of the signature of a data at some point in time, the validity of the signature and the identity of the signer)  The properties &#x60;id&#x60;, &#x60;created&#x60;, &#x60;lastModified&#x60;, &#x60;status&#x60;, &#x60;timestamp&#x60; and &#x60;confirmations&#x60; are read-only and so must not be provided: they are managed by the platform and added to the returned anchor.&lt;br&gt; For data anchors, only the properties &#x60;name&#x60; and &#x60;hash&#x60; are required: the &#x60;hash&#x60; property must be the SHA256 hash of the data to anchor, and must be computed caller side. This allows not to leak the original data.&lt;br&gt; For signature anchors, only the properties &#x60;name&#x60;, &#x60;signedHash&#x60;, &#x60;signature&#x60; and &#x60;pubKey&#x60; are required.&lt;br&gt; Be sure to have at least 1 timestamp credit (for a data anchor) or 1 seal credit (for a signature anchor). 
     * @param anchor Anchor object to create. (required)
     * @return ApiResponse&lt;Anchor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient credits. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Anchor> createAnchorWithHttpInfo(Anchor anchor) throws ApiException {
        okhttp3.Call localVarCall = createAnchorValidateBeforeCall(anchor, null);
        Type localVarReturnType = new TypeToken<Anchor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new anchor. (asynchronously)
     * Use this operation to create a new anchor of one of these two types: - a **data anchor** (to generate a *proof of timestamp* allowing to prove the existence of a data at some point in time) - a **signature anchor** (to generate a *proof of seal* allowing to prove the existence of the signature of a data at some point in time, the validity of the signature and the identity of the signer)  The properties &#x60;id&#x60;, &#x60;created&#x60;, &#x60;lastModified&#x60;, &#x60;status&#x60;, &#x60;timestamp&#x60; and &#x60;confirmations&#x60; are read-only and so must not be provided: they are managed by the platform and added to the returned anchor.&lt;br&gt; For data anchors, only the properties &#x60;name&#x60; and &#x60;hash&#x60; are required: the &#x60;hash&#x60; property must be the SHA256 hash of the data to anchor, and must be computed caller side. This allows not to leak the original data.&lt;br&gt; For signature anchors, only the properties &#x60;name&#x60;, &#x60;signedHash&#x60;, &#x60;signature&#x60; and &#x60;pubKey&#x60; are required.&lt;br&gt; Be sure to have at least 1 timestamp credit (for a data anchor) or 1 seal credit (for a signature anchor). 
     * @param anchor Anchor object to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Insufficient credits. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAnchorAsync(Anchor anchor, final ApiCallback<Anchor> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAnchorValidateBeforeCall(anchor, _callback);
        Type localVarReturnType = new TypeToken<Anchor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAnchor
     * @param anchorId Identifier of the anchor to delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor is deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnchorCall(String anchorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anchor/{anchorId}"
            .replaceAll("\\{" + "anchorId" + "\\}", localVarApiClient.escapeString(anchorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAnchorValidateBeforeCall(String anchorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'anchorId' is set
        if (anchorId == null) {
            throw new ApiException("Missing the required parameter 'anchorId' when calling deleteAnchor(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAnchorCall(anchorId, _callback);
        return localVarCall;

    }

    /**
     * Delete an anchor.
     * Use this operation to delete an anchor.&lt;br&gt; **WARNING: You should never delete an anchor, otherwise you will no longer be able to download its proof receipt.&lt;br&gt; Use this for test purpose only.** 
     * @param anchorId Identifier of the anchor to delete. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor is deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAnchor(String anchorId) throws ApiException {
        deleteAnchorWithHttpInfo(anchorId);
    }

    /**
     * Delete an anchor.
     * Use this operation to delete an anchor.&lt;br&gt; **WARNING: You should never delete an anchor, otherwise you will no longer be able to download its proof receipt.&lt;br&gt; Use this for test purpose only.** 
     * @param anchorId Identifier of the anchor to delete. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor is deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAnchorWithHttpInfo(String anchorId) throws ApiException {
        okhttp3.Call localVarCall = deleteAnchorValidateBeforeCall(anchorId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an anchor. (asynchronously)
     * Use this operation to delete an anchor.&lt;br&gt; **WARNING: You should never delete an anchor, otherwise you will no longer be able to download its proof receipt.&lt;br&gt; Use this for test purpose only.** 
     * @param anchorId Identifier of the anchor to delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor is deleted. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAnchorAsync(String anchorId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAnchorValidateBeforeCall(anchorId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnchor
     * @param anchorId Identifier of the anchor to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnchorCall(String anchorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anchor/{anchorId}"
            .replaceAll("\\{" + "anchorId" + "\\}", localVarApiClient.escapeString(anchorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnchorValidateBeforeCall(String anchorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'anchorId' is set
        if (anchorId == null) {
            throw new ApiException("Missing the required parameter 'anchorId' when calling getAnchor(Async)");
        }
        

        okhttp3.Call localVarCall = getAnchorCall(anchorId, _callback);
        return localVarCall;

    }

    /**
     * Get an anchor by its identifier.
     * Use this operation to retrieve an anchor by its identifier.
     * @param anchorId Identifier of the anchor to retrieve. (required)
     * @return Anchor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public Anchor getAnchor(String anchorId) throws ApiException {
        ApiResponse<Anchor> localVarResp = getAnchorWithHttpInfo(anchorId);
        return localVarResp.getData();
    }

    /**
     * Get an anchor by its identifier.
     * Use this operation to retrieve an anchor by its identifier.
     * @param anchorId Identifier of the anchor to retrieve. (required)
     * @return ApiResponse&lt;Anchor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Anchor> getAnchorWithHttpInfo(String anchorId) throws ApiException {
        okhttp3.Call localVarCall = getAnchorValidateBeforeCall(anchorId, null);
        Type localVarReturnType = new TypeToken<Anchor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an anchor by its identifier. (asynchronously)
     * Use this operation to retrieve an anchor by its identifier.
     * @param anchorId Identifier of the anchor to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The anchor. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnchorAsync(String anchorId, final ApiCallback<Anchor> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnchorValidateBeforeCall(anchorId, _callback);
        Type localVarReturnType = new TypeToken<Anchor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAnchorAttestation
     * @param anchorId Identifier of the anchor. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The proof attestation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Proof attestation not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Anchor not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnchorAttestationCall(String anchorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anchor/{anchorId}/attestation"
            .replaceAll("\\{" + "anchorId" + "\\}", localVarApiClient.escapeString(anchorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAnchorAttestationValidateBeforeCall(String anchorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'anchorId' is set
        if (anchorId == null) {
            throw new ApiException("Missing the required parameter 'anchorId' when calling getAnchorAttestation(Async)");
        }
        

        okhttp3.Call localVarCall = getAnchorAttestationCall(anchorId, _callback);
        return localVarCall;

    }

    /**
     * Download the Proof Attestation document of an anchor.
     * Use this operation to retrieve the Proof Attestation document of an anchor.&lt;br&gt; This PDF file is only available once the anchor status is CONFIRMED. 
     * @param anchorId Identifier of the anchor. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The proof attestation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Proof attestation not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Anchor not found. </td><td>  -  </td></tr>
     </table>
     */
    public File getAnchorAttestation(String anchorId) throws ApiException {
        ApiResponse<File> localVarResp = getAnchorAttestationWithHttpInfo(anchorId);
        return localVarResp.getData();
    }

    /**
     * Download the Proof Attestation document of an anchor.
     * Use this operation to retrieve the Proof Attestation document of an anchor.&lt;br&gt; This PDF file is only available once the anchor status is CONFIRMED. 
     * @param anchorId Identifier of the anchor. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The proof attestation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Proof attestation not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Anchor not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAnchorAttestationWithHttpInfo(String anchorId) throws ApiException {
        okhttp3.Call localVarCall = getAnchorAttestationValidateBeforeCall(anchorId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download the Proof Attestation document of an anchor. (asynchronously)
     * Use this operation to retrieve the Proof Attestation document of an anchor.&lt;br&gt; This PDF file is only available once the anchor status is CONFIRMED. 
     * @param anchorId Identifier of the anchor. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The proof attestation. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Proof attestation not yet available. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Anchor not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAnchorAttestationAsync(String anchorId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAnchorAttestationValidateBeforeCall(anchorId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAnchorIds
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchor identifiers per page. (optional, default to 20)
     * @param hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param userId User identifier to use to filter out results: only public anchors belonging to this user are returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of the identifiers of all public anchors matching all search criteria, plus additional paging information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAnchorIdsCall(Integer page, Integer size, String hash, String signedHash, String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anchorIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (signedHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signedHash", signedHash));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAnchorIdsValidateBeforeCall(Integer page, Integer size, String hash, String signedHash, String userId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchAnchorIdsCall(page, size, hash, signedHash, userId, _callback);
        return localVarCall;

    }

    /**
     * Search for public anchor identifiers.
     * Use this operation to retrieve the identifiers of all public anchors having a given &#x60;hash&#x60; and/or &#x60;signedHash&#x60; property.&lt;br&gt; Only public anchor identifiers are returned.&lt;br&gt; This is a publicly accessible endpoint: authentication is not required to retrieve public anchor identifiers.&lt;br&gt; Paging is supported. 
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchor identifiers per page. (optional, default to 20)
     * @param hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param userId User identifier to use to filter out results: only public anchors belonging to this user are returned.  (optional)
     * @return AnchorIds
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of the identifiers of all public anchors matching all search criteria, plus additional paging information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public AnchorIds searchAnchorIds(Integer page, Integer size, String hash, String signedHash, String userId) throws ApiException {
        ApiResponse<AnchorIds> localVarResp = searchAnchorIdsWithHttpInfo(page, size, hash, signedHash, userId);
        return localVarResp.getData();
    }

    /**
     * Search for public anchor identifiers.
     * Use this operation to retrieve the identifiers of all public anchors having a given &#x60;hash&#x60; and/or &#x60;signedHash&#x60; property.&lt;br&gt; Only public anchor identifiers are returned.&lt;br&gt; This is a publicly accessible endpoint: authentication is not required to retrieve public anchor identifiers.&lt;br&gt; Paging is supported. 
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchor identifiers per page. (optional, default to 20)
     * @param hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param userId User identifier to use to filter out results: only public anchors belonging to this user are returned.  (optional)
     * @return ApiResponse&lt;AnchorIds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of the identifiers of all public anchors matching all search criteria, plus additional paging information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnchorIds> searchAnchorIdsWithHttpInfo(Integer page, Integer size, String hash, String signedHash, String userId) throws ApiException {
        okhttp3.Call localVarCall = searchAnchorIdsValidateBeforeCall(page, size, hash, signedHash, userId, null);
        Type localVarReturnType = new TypeToken<AnchorIds>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for public anchor identifiers. (asynchronously)
     * Use this operation to retrieve the identifiers of all public anchors having a given &#x60;hash&#x60; and/or &#x60;signedHash&#x60; property.&lt;br&gt; Only public anchor identifiers are returned.&lt;br&gt; This is a publicly accessible endpoint: authentication is not required to retrieve public anchor identifiers.&lt;br&gt; Paging is supported. 
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchor identifiers per page. (optional, default to 20)
     * @param hash &#x60;hash&#x60; to search for: all public anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all public anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param userId User identifier to use to filter out results: only public anchors belonging to this user are returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of the identifiers of all public anchors matching all search criteria, plus additional paging information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAnchorIdsAsync(Integer page, Integer size, String hash, String signedHash, String userId, final ApiCallback<AnchorIds> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAnchorIdsValidateBeforeCall(page, size, hash, signedHash, userId, _callback);
        Type localVarReturnType = new TypeToken<AnchorIds>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAnchors
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchors per page. (optional, default to 20)
     * @param direction Sorting direction: ASC for ascending DESC for descending.  (optional, default to ASC)
     * @param sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;.  (optional, default to created)
     * @param name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.**  (optional)
     * @param hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param tags Tags to search for: all anchors having all of these tags sets are returned.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of all anchors matching all search criteria, plus additional paging and sorting information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Can be triggered when searching by name if the request takes too long to process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAnchorsCall(Integer page, Integer size, String direction, String sort, String name, String hash, String signedHash, List<String> tags, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anchors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (signedHash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signedHash", signedHash));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAnchorsValidateBeforeCall(Integer page, Integer size, String direction, String sort, String name, String hash, String signedHash, List<String> tags, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = searchAnchorsCall(page, size, direction, sort, name, hash, signedHash, tags, _callback);
        return localVarCall;

    }

    /**
     * Search for anchors.
     * Use this operation to retrieve all anchors having a given &#x60;name&#x60;, &#x60;hash&#x60;, &#x60;signedHash&#x60; and/or &#x60;tags&#x60; property.&lt;br&gt; Only anchors belonging to the authenticated user are returned.&lt;br&gt; Paging and sorting is supported. 
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchors per page. (optional, default to 20)
     * @param direction Sorting direction: ASC for ascending DESC for descending.  (optional, default to ASC)
     * @param sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;.  (optional, default to created)
     * @param name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.**  (optional)
     * @param hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param tags Tags to search for: all anchors having all of these tags sets are returned.  (optional)
     * @return Anchors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of all anchors matching all search criteria, plus additional paging and sorting information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Can be triggered when searching by name if the request takes too long to process. </td><td>  -  </td></tr>
     </table>
     */
    public Anchors searchAnchors(Integer page, Integer size, String direction, String sort, String name, String hash, String signedHash, List<String> tags) throws ApiException {
        ApiResponse<Anchors> localVarResp = searchAnchorsWithHttpInfo(page, size, direction, sort, name, hash, signedHash, tags);
        return localVarResp.getData();
    }

    /**
     * Search for anchors.
     * Use this operation to retrieve all anchors having a given &#x60;name&#x60;, &#x60;hash&#x60;, &#x60;signedHash&#x60; and/or &#x60;tags&#x60; property.&lt;br&gt; Only anchors belonging to the authenticated user are returned.&lt;br&gt; Paging and sorting is supported. 
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchors per page. (optional, default to 20)
     * @param direction Sorting direction: ASC for ascending DESC for descending.  (optional, default to ASC)
     * @param sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;.  (optional, default to created)
     * @param name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.**  (optional)
     * @param hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param tags Tags to search for: all anchors having all of these tags sets are returned.  (optional)
     * @return ApiResponse&lt;Anchors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of all anchors matching all search criteria, plus additional paging and sorting information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Can be triggered when searching by name if the request takes too long to process. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Anchors> searchAnchorsWithHttpInfo(Integer page, Integer size, String direction, String sort, String name, String hash, String signedHash, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = searchAnchorsValidateBeforeCall(page, size, direction, sort, name, hash, signedHash, tags, null);
        Type localVarReturnType = new TypeToken<Anchors>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for anchors. (asynchronously)
     * Use this operation to retrieve all anchors having a given &#x60;name&#x60;, &#x60;hash&#x60;, &#x60;signedHash&#x60; and/or &#x60;tags&#x60; property.&lt;br&gt; Only anchors belonging to the authenticated user are returned.&lt;br&gt; Paging and sorting is supported. 
     * @param page Index of the page to retrieve (from 0). (optional, default to 0)
     * @param size Number of anchors per page. (optional, default to 20)
     * @param direction Sorting direction: ASC for ascending DESC for descending.  (optional, default to ASC)
     * @param sort Sorting property: possible values are limited to &#x60;created&#x60;, &#x60;hash&#x60; and &#x60;signedHash&#x60;.  (optional, default to created)
     * @param name &#x60;name&#x60; to search for: all anchors whose &#x60;name&#x60; property contains this sub-string are returned.&lt;br&gt; **WARNING: Searching by name can timeout on a large anchor set.**  (optional)
     * @param hash &#x60;hash&#x60; to search for: all anchors whose &#x60;hash&#x60; property is equal are returned.  (optional)
     * @param signedHash &#x60;signedHash&#x60; to search for: all anchors whose &#x60;signedHash&#x60; property is equal are returned.  (optional)
     * @param tags Tags to search for: all anchors having all of these tags sets are returned.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array (possibly empty) of all anchors matching all search criteria, plus additional paging and sorting information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Can be triggered when searching by name if the request takes too long to process. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAnchorsAsync(Integer page, Integer size, String direction, String sort, String name, String hash, String signedHash, List<String> tags, final ApiCallback<Anchors> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAnchorsValidateBeforeCall(page, size, direction, sort, name, hash, signedHash, tags, _callback);
        Type localVarReturnType = new TypeToken<Anchors>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAnchor
     * @param anchorId Identifier of anchor to update. (required)
     * @param anchor Anchor object to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnchorCall(String anchorId, Anchor anchor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = anchor;

        // create path and map variables
        String localVarPath = "/anchor/{anchorId}"
            .replaceAll("\\{" + "anchorId" + "\\}", localVarApiClient.escapeString(anchorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "BasicAuth", "JWTAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAnchorValidateBeforeCall(String anchorId, Anchor anchor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'anchorId' is set
        if (anchorId == null) {
            throw new ApiException("Missing the required parameter 'anchorId' when calling updateAnchor(Async)");
        }
        
        // verify the required parameter 'anchor' is set
        if (anchor == null) {
            throw new ApiException("Missing the required parameter 'anchor' when calling updateAnchor(Async)");
        }
        

        okhttp3.Call localVarCall = updateAnchorCall(anchorId, anchor, _callback);
        return localVarCall;

    }

    /**
     * Update an anchor.
     * Use this operation to update an anchor.&lt;br&gt; Only the properties &#x60;name&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;metadata&#x60; and &#x60;callbackURL&#x60; can be modified. 
     * @param anchorId Identifier of anchor to update. (required)
     * @param anchor Anchor object to update. (required)
     * @return Anchor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public Anchor updateAnchor(String anchorId, Anchor anchor) throws ApiException {
        ApiResponse<Anchor> localVarResp = updateAnchorWithHttpInfo(anchorId, anchor);
        return localVarResp.getData();
    }

    /**
     * Update an anchor.
     * Use this operation to update an anchor.&lt;br&gt; Only the properties &#x60;name&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;metadata&#x60; and &#x60;callbackURL&#x60; can be modified. 
     * @param anchorId Identifier of anchor to update. (required)
     * @param anchor Anchor object to update. (required)
     * @return ApiResponse&lt;Anchor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Anchor> updateAnchorWithHttpInfo(String anchorId, Anchor anchor) throws ApiException {
        okhttp3.Call localVarCall = updateAnchorValidateBeforeCall(anchorId, anchor, null);
        Type localVarReturnType = new TypeToken<Anchor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an anchor. (asynchronously)
     * Use this operation to update an anchor.&lt;br&gt; Only the properties &#x60;name&#x60;, &#x60;public&#x60;, &#x60;tags&#x60;, &#x60;metadata&#x60; and &#x60;callbackURL&#x60; can be modified. 
     * @param anchorId Identifier of anchor to update. (required)
     * @param anchor Anchor object to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated anchor. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request. More details are returned in the response body as a JSON object. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No anchor matching the given identifier. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAnchorAsync(String anchorId, Anchor anchor, final ApiCallback<Anchor> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAnchorValidateBeforeCall(anchorId, anchor, _callback);
        Type localVarReturnType = new TypeToken<Anchor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
