/*
 * Woleet API
 * Welcome to **Woleet API reference documentation**.<br> It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation. 
 *
 * OpenAPI spec version: 1.6.1
 * Contact: contact@woleet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.woleet.api.client;

import io.woleet.api.ApiException;
import io.woleet.api.client.model.User;
import io.woleet.api.client.model.Users;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DomainApi
 */
@Ignore
public class DomainApiTest {

    private final DomainApi api = new DomainApi();

    
    /**
     * Create a new domain user.
     *
     * Use this operation to create a new domain user.&lt;br&gt; The properties &#x60;id&#x60;, &#x60;created&#x60;, &#x60;lastModified&#x60;, &#x60;info&#x60; and &#x60;status&#x60; are read-only and so must not be provided: they are managed by the platform and added to the returned anchor. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDomainUserTest() throws ApiException {
        User user = null;
        User response = api.createDomainUser(user);

        // TODO: test validations
    }
    
    /**
     * Delete a domain user.
     *
     * Use this operation to delete a domain user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDomainUserTest() throws ApiException {
        String userId = null;
        api.deleteDomainUser(userId);

        // TODO: test validations
    }
    
    /**
     * Get a domain user by its identifier.
     *
     * Use this operation to retrieve a domain user by its identifier.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDomainUserTest() throws ApiException {
        String userId = null;
        User response = api.getDomainUser(userId);

        // TODO: test validations
    }
    
    /**
     * Search for domain users.
     *
     * Use this operation to list all domain users or search for domain users given their email.&lt;br&gt; Paging and sorting is supported. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchDomainUsersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String direction = null;
        String sort = null;
        String email = null;
        Users response = api.searchDomainUsers(page, size, direction, sort, email);

        // TODO: test validations
    }
    
    /**
     * Update a domain user.
     *
     * Use this operation to update a domain user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDomainUserTest() throws ApiException {
        String userId = null;
        User user = null;
        User response = api.updateDomainUser(userId, user);

        // TODO: test validations
    }
    
}
