openapi: 3.0.1
info:
  contact:
    email: contact@woleet.com
    url: https://www.woleet.io/
  description: |
    Welcome to **Woleet API reference documentation**.<br>
    It is highly recommanded to read the chapters **[introducing Woleet API concepts](https://doc.woleet.io/reference)** before reading this documentation.
  termsOfService: https://doc.woleet.io/docs/terms-of-service
  title: Woleet API
  version: 1.13.0
servers:
- url: https://api.woleet.io/v1
security:
- BasicAuth: []
- JWTAuth: []
tags:
- description: Create and manage anchors.
  name: anchor
- description: Get and verify proof receipts.
  name: receipt
- description: Create and manage signature requests.
  name: signatureRequest
- description: Create and revoke JWT tokens.
  name: token
- description: Manage user account.
  name: user
paths:
  /anchor:
    post:
      description: |
        Use this operation to create a new anchor of one of these two types:
        - a **data anchor** (to generate a *proof of timestamp* allowing to prove the existence of a data at some point in time)
        - a **signature anchor** (to generate a *proof of seal* allowing to prove the existence of the signature of a data at some point in time, the validity of the signature and the identity of the signer)

        The properties `id`, `created`, `lastModified`, `status`, `timestamp` and `confirmations` are read-only and so must not be provided: they are managed by the platform and added to the returned anchor.<br>
        For data anchors, only the properties `name` and `hash` are required: the `hash` property must be the SHA256 hash of the data to anchor, and must be computed caller side. This allows not to leak the original data.<br>
        For signature anchors, only the properties `name`, `signedHash`, `signature` and `pubKey` are required.<br>
        Be sure to have at least 1 timestamp credit (for a data anchor) or 1 seal credit (for a signature anchor).
      operationId: createAnchor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/anchor'
        description: Anchor object to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/anchor'
          description: The created anchor.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "402":
          description: Insufficient credits.
      summary: Create a new anchor.
      tags:
      - anchor
      x-contentType: application/json
      x-accepts: application/json
  /anchor/{anchorId}:
    delete:
      description: |
        Use this operation to delete an anchor.<br>
        **WARNING: You should never delete an anchor, otherwise you will no longer be able to download its proof receipt.<br>
        Use this for test purpose only.**
      operationId: deleteAnchor
      parameters:
      - description: Identifier of the anchor to delete.
        explode: false
        in: path
        name: anchorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: The anchor is deleted.
        "404":
          description: No anchor matching the given identifier.
      summary: Delete an anchor.
      tags:
      - anchor
      x-accepts: application/json
    get:
      description: Use this operation to retrieve an anchor by its identifier.
      operationId: getAnchor
      parameters:
      - description: Identifier of the anchor to retrieve.
        explode: false
        in: path
        name: anchorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/anchor'
          description: The anchor.
        "404":
          description: No anchor matching the given identifier.
      summary: Get an anchor by its identifier.
      tags:
      - anchor
      x-accepts: application/json
    put:
      description: |
        Use this operation to update an anchor.<br>
        Only the properties `name`, `public`, `tags`, `metadata` and `callbackURL` can be modified.
      operationId: updateAnchor
      parameters:
      - description: Identifier of anchor to update.
        explode: false
        in: path
        name: anchorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/anchor'
        description: Anchor object to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/anchor'
          description: The updated anchor.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "404":
          description: No anchor matching the given identifier.
      summary: Update an anchor.
      tags:
      - anchor
      x-contentType: application/json
      x-accepts: application/json
  /anchor/{anchorId}/attestation:
    get:
      description: |
        Use this operation to retrieve the Proof Attestation document of an anchor.<br>
        This PDF file is only available once the anchor status is CONFIRMED.
      operationId: getAnchorAttestation
      parameters:
      - description: Identifier of the anchor.
        explode: false
        in: path
        name: anchorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pdfFile'
          description: The proof attestation.
        "400":
          description: Proof attestation not yet available.
        "404":
          description: Anchor not found.
      summary: Download the Proof Attestation document of an anchor.
      tags:
      - anchor
      x-accepts: application/json
  /anchorIds:
    get:
      description: |
        Use this operation to retrieve the identifiers of all public anchors having a given `hash` and/or `signedHash` property.<br>
        Only public anchor identifiers are returned.<br>
        This is a publicly accessible endpoint: authentication is not required to retrieve public anchor identifiers.<br>
        Paging is supported.
      operationId: searchAnchorIds
      parameters:
      - description: Index of the page to retrieve (from 0).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: Number of anchor identifiers per page.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          `hash` to search for: all public anchors whose `hash` property is equal are returned.
        explode: true
        in: query
        name: hash
        required: false
        schema:
          type: string
        style: form
      - description: |
          `signedHash` to search for: all public anchors whose `signedHash` property is equal are returned.
        explode: true
        in: query
        name: signedHash
        required: false
        schema:
          type: string
        style: form
      - description: |
          User identifier to use to filter out results: only public anchors belonging to this user are returned.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/anchorIds'
          description: An array (possibly empty) of the identifiers of all public
            anchors matching all search criteria, plus additional paging information.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
      security: []
      summary: Search for public anchor identifiers.
      tags:
      - anchor
      x-accepts: application/json
  /anchors:
    get:
      description: |
        Use this operation to retrieve all anchors having a given `name`, `hash`, `signedHash` and/or `tags` property.<br>
        Only anchors belonging to the authenticated user are returned.<br>
        Paging and sorting is supported.
      operationId: searchAnchors
      parameters:
      - description: Index of the page to retrieve (from 0).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: Number of anchors per page.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sorting direction: ASC for ascending DESC for descending.
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: |
          Sorting property: possible values are limited to `created`, `hash` and `signedHash`.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: created
          enum:
          - created
          - hash
          - signedHash
          type: string
        style: form
      - description: |
          `name` to search for: all anchors whose `name` property contains this sub-string are returned.<br>
          **WARNING: Searching by name can timeout on a large anchor set.**
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: |
          `hash` to search for: all anchors whose `hash` property is equal are returned.
        explode: true
        in: query
        name: hash
        required: false
        schema:
          type: string
        style: form
      - description: |
          `signedHash` to search for: all anchors whose `signedHash` property is equal are returned.
        explode: true
        in: query
        name: signedHash
        required: false
        schema:
          type: string
        style: form
      - description: |
          Tags to search for: all anchors having all of these tags sets are returned.
        explode: false
        in: query
        name: tags
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/anchors'
          description: An array (possibly empty) of all anchors matching all search
            criteria, plus additional paging and sorting information.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "504":
          description: Can be triggered when searching by name if the request takes
            too long to process.
      summary: Search for anchors.
      tags:
      - anchor
      x-accepts: application/json
  /receipt/{anchorId}:
    get:
      description: |
        Use this operation to retrieve the proof receipt associated to a given anchor.<br>
        This JSON file is only available once the anchor status is SENT.<br>
        This is a publicly accessible endpoint: authentication is not required to retrieve a proof receipt (but the anchor identifier needs to be known).
      operationId: getReceipt
      parameters:
      - description: Identifier of the anchor for which to build the proof receipt.
        explode: false
        in: path
        name: anchorId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          `true` if a partial proof receipt is to be returned when the proof of timestamp is not yet available (ie. the data or the signature has not yet been anchored).<br>
          If the proof of timestamp is availalble (anchor is SENT or CONFIRMED) a regular proof receipt is returned (with response code 200).
          Otherwise, a partial proof receipt not including the proof of timestamp is returned (response code 202).<br>
          The partial proof receipt of a signature anchor allows to verify the signature and the identity of the signer immediatly after signing, without having to wait for the anchoring process to complete.
        explode: true
        in: query
        name: allowPartial
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/receipt'
          description: The proof receipt.
        "202":
          description: |
            If `allowPartial` is `false` or unset: the proof receipt is not yet available.<br>
            If `allowPartial` is `true`: the partial proof receipt (returned in the response body).
        "404":
          description: No anchor matching the given identifier.
      security: []
      summary: Get the proof receipt of an anchor.
      tags:
      - receipt
      x-accepts: application/json
  /receipt/{anchorId}/ots:
    get:
      description: |
        Use this operation to retrieve the OpenTimestamps proof receipt associated to a given data anchor
        (note that this operation is NOT available for signature anchors).<br>
        This binary file is only available once the anchor status is SENT.<br>
        This is a publicly accessible endpoint: authentication is not required to retrieve a proof receipt (but the anchor identifier needs to be known).
      operationId: getOTSReceipt
      parameters:
      - description: Identifier of the data anchor for which to build the proof receipt.
        explode: false
        in: path
        name: anchorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otsReceipt'
          description: The proof receipt (conform to the OpenTimestamps format).
        "202":
          description: The proof receipt is not yet available.
        "404":
          description: No anchor matching the given identifier.
      security: []
      summary: Get the proof receipt of an anchor (OpenTimestamps proof format).
      tags:
      - receipt
      x-accepts: application/json
  /receipt/verify:
    post:
      description: |
        Use this operation to verify a proof receipt and get the timestamp of the proof.<br>
        For a proof of seal/signaure receipt, this operation also verifies the signature.<br>
        If the proof of seal/signature receipt includes an identity URL, this operation also verifies the identity of the signer.<br>
        This is a publicly accessible endpoint: authentication is not required to verify a proof receipt.
      operationId: verifyReceipt
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/receipt'
        description: Proof receipt to verify.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/receiptVerificationStatus'
          description: The proof receipt verification status.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
      security: []
      summary: Verify a proof receipt.
      tags:
      - receipt
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest:
    post:
      description: |
        Use this operation to create a new signature request.<br>
        The properties `id`, `created` and `lastModified` are read-only and so must not be provided: they are managed by the platform and added to the returned request.<br>
        Only the properties `name` and `hashToSign` are required: the `hashToSign` property must be the SHA256 hash of the file to sign.<br>
        Be sure to have at least 1 signature request credit, plus enough signature and SMS credits to fulfill the signature request.<br>
      operationId: createSignatureRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureRequest'
        description: SignatureRequest object to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequest'
          description: The created signature request.
        "400":
          description: Invalid request. More details are returned in the responsebody
            as a JSON object.
      summary: Create a new signature request.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest/{requestId}/transition:
    post:
      description: |
        Use this operation to transition a **stateful** signature request to a new state.<br>
        Possible transitions are:
        - from DRAFT to PENDING: start the signature request: the platform waits for the activation date (only if set) and transitions the signature request to IN_PROGRESS automatically
        - from PENDING to DRAFT: suspend the signature request so that it can be updated
        - from PENDING to CANCELED: cancel the signature request without waiting for the activation date
        - from IN_PROGRESS to CLOSED: close the signature request before all signatures get colleted
        - from IN_PROGRESS to CANCELED: cancel the signature request before all signatures get colleted

        Note that **stateless** signature requests can only be transitioned to CLOSED or CANCELED,
        which triggers the generation of the audit trail and its signature by the platform.
      operationId: transitionSignatureRequest
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureRequestState'
        description: New state of the signature request.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequest'
          description: The transitioned signature request.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "403":
          description: Forbidden. Invalid transition.
        "404":
          description: Signature request not found.
      summary: Change the state of a signature request.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest/{requestId}/remind:
    post:
      description: |
        Use this operation to send a reminder email to a set of signers of a signature request.<br>
        This email reminds them that they have a document to sign.
      operationId: sendSignatureRequestReminder
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: |
          The list of emails of the authorized signers who will receive the reminder email.
        required: true
      responses:
        "200":
          description: Reminder email succesfully sent to the signers.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "403":
          description: Forbidden. The signature request is not in progress, or at
            least one of the signers already signed.
        "404":
          description: Signature request not found.
        "429":
          description: Too many requests. A minimum delay of 1 hours is required between
            two reminder emails.
      summary: Send a reminder email to a set of signers of a signature request.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest/{requestId}/otp/{signeeId}:
    get:
      description: |
        Use this operation to generate and send a new OTP (One Time Password) by SMS to a signer of a signature request.<br>
        This OTP can be used to sign during a maximum period of 10 mn.
      operationId: sendSignatureRequestOTP
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Secret identifier of the signer wanting to retrieve his OTP.<br>
          **This secret identifier is generated by the platform and provided by email to the signer only.
          It allows the platform to authenticate the signer and verify his email address.**
        explode: false
        in: path
        name: signeeId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OTP succesfully generated and sent by SMS to the signer.
        "401":
          description: Unauthorized. The signer is not an authorized signer (secret
            signer identifier not found).
        "403":
          description: Forbidden. The signature request is not in progress, or the
            signer does not require an OTP.
        "404":
          description: Signature request not found.
        "429":
          description: Too many requests. A minimum delay of 1 second is required
            between two OTP generation.
      security: []
      summary: Generate and send an OTP to a signer of a signature request.
      tags:
      - signatureRequest
      x-accepts: application/json
  /signatureRequest/{requestId}/sign:
    post:
      description: |
        A signer can use this operation to sign a signature request by registering a signature he procuded on his own.<br>
        The signature is automatically anchored on behalf of the owner of the signature request.<br>
        The signature anchor created is added to the list of signature anchors of the signature request.<br>
        This is a publicly accessible endpoint: authentication is not required to register a signature
        (authentication of the signer rely on the knowledge of his secret identifier and OTP, or on the control of his public key).
      operationId: signSignatureRequest
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureRequestSign'
        description: Signature to register.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequestSignResult'
          description: Signature succesfully registered. The signature anchor created
            is returned.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "401":
          description: Unauthorized. The signer is not an authorized signer (public
            key or secret signer identifier not found, or invalid OTP).
        "402":
          description: Insufficient credits. The owner of the signature request runs
            out of signature credit.
        "403":
          description: Forbidden. The signature request is not in progress, the maximum
            number of signatures has been reached or the OTP has expired.
        "404":
          description: Signature request not found.
        "409":
          description: Conflict. The signer has already signed.
        "429":
          description: Too many requests. A minimum delay of 1 second is required
            after providing an invalid OTP.
      security: []
      summary: Sign a signature request by registering a signature.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest/{requestId}/delegate:
    post:
      description: |
        A signer can use this operation to sign a signature request by delegating the signature to the platform.<br>
        When using this signature mode, the signature key of the signer is controled by the platform, which acts as a trusted third party.<br>
        The signature is automatically anchored on behalf of the owner of the signature request.<br>
        The signature anchor created is added to the list of signature anchors of the signature request.<br>
        This is a publicly accessible endpoint: authentication is not required to delegate a signature
        (authentication of the signer rely on the knowledge of his secret identifier and OTP).
      operationId: delegateSignSignatureRequest
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureRequestDelegate'
        description: Authentication information about the signer.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequestSignResult'
          description: Signature succesfully delegated. The signature anchor created
            is returned.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "401":
          description: Unauthorized. The signer is not an authorized signer (secret
            signer identifier not found, or invalid OTP).
        "402":
          description: Insufficient credits. The owner of the signature request runs
            out of signature credit.
        "403":
          description: Forbidden. The signature request is not in progress, the maximum
            number of signatures has been reached or the OTP has expired.
        "404":
          description: Signature request not found.
        "409":
          description: Conflict. The signer has already signed.
        "429":
          description: Too many requests. A minimum delay of 1 second is required
            after providing an invalid OTP.
      security:
      - BasicAuth: []
      - JWTAuth: []
      - {}
      summary: Sign a signature request by delegating the signature.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest/{requestId}/feedback:
    post:
      description: |
        A signer can use this operation to report a feedback to the owner of a signature request.<br>
        This is a publicly accessible endpoint: authentication is not required to report a feedback
        (authentication of the signer rely on the knowledge of his secret identifier).
      operationId: reportSignatureRequestFeedback
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureRequestFeedback'
        description: Feedback to report.
        required: true
      responses:
        "200":
          description: Feedback succesfully reported.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "401":
          description: Unauthorized. The signer is not an authorized signer (secret
            signer identifier not found).
        "404":
          description: Signature request not found.
      security: []
      summary: Report a feedback about a signature request.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest/{requestId}/event:
    post:
      description: |
        A signer can use this operation to report an event on a signature request.<br>
        Events reported are included in the audit trail of the signature request.<br>
        This is a publicly accessible endpoint: authentication is not required to report an event
        (authentication of the signer rely on the knowledge of his secret identifier).
      operationId: reportSignatureRequestEvent
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureRequestEvent'
        description: Event to report.
        required: true
      responses:
        "200":
          description: Event succesfully reported.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "401":
          description: Unauthorized. The signer is not an authorized signer (secret
            signer identifier not found).
        "404":
          description: Signature request not found.
      security: []
      summary: Report an event on a signature request.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequest/{requestId}/attestation:
    get:
      description: |
        Use this operation to retrieve the Signature Attestation document of a signature request.<br>
        This PDF file summarizes the signature request and includes the proof bundle as an attachement.<br>
        The proof bundle is a JSON file containing all the pieces of evidence:
        - the audit trail
        - the proof receipt of the signature of the audit trail by the platform
        - the proof receipts of the signature of the file by the signers

        Consequently, the signature attestation is only available once all the following conditions are met:
        - the signature request is COMPLETED (by the platform) or CLOSED (by the requester)
        - all the proof receipts are available (ie. all signatures have been anchored)
        - the audit trail is generated and signed by the platform and its proof receipt is available (ie. its signature has been anchored)

        Once these conditions are met, the platform sets the `proofBundleComplete` property to `true`.<br>
        This is a publicly accessible endpoint: authentication is not required to retrieve the signature attestation of a signature request (but its identifier needs to be known).
      operationId: getSignatureRequestAttestation
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pdfFile'
          description: The Signature Attestation document.
        "400":
          description: Signature Attestation document not yet available.
        "404":
          description: Signature request not found.
      security: []
      summary: Download the Signature Attestation document of a signature request.
      tags:
      - signatureRequest
      x-accepts: application/json
  /signatureRequest/{requestId}/proofbundle:
    get:
      description: |
        Use this operation to retrieve the proof bundle of a signature request.<br>
        The proof bundle is a JSON file containing all the pieces of evidence:
        - the audit trail
        - the proof receipt of the signature of the audit trail by the platform
        - the proof receipts of the signature of the file by the signers

        Consequently, the proof bundle is only available once all the following conditions are met:
        - the signature request is COMPLETED (by the platform) or CLOSED (by the requester)
        - all the proof receipts are available (ie. all signatures have been anchored)
        - the audit trail is generated and signed by the platform and its proof receipt is available (ie. its signature has been anchored)

        Once these conditions are met, the platform sets the `proofBundleComplete` property to `true`.<br>
        If this endpoint is called before all these conditions are met, it returns only the available proof receipts (with a 202 status).<br>
        This is a publicly accessible endpoint: authentication is not required to retrieve the proof bundle of a signature request (but its identifier needs to be known).
      operationId: getSignatureRequestProofBundle
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequestProofBundle'
          description: The proof bundle of the signature request.
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequestProofBundle'
          description: A partial proof bundle of the signature request (some signature
            are missing or not all receipts are yet available).
        "404":
          description: Signature request not found.
      security: []
      summary: Get the proof bundle of a signature request.
      tags:
      - signatureRequest
      x-accepts: application/json
  /signatureRequest/{requestId}/file:
    get:
      description: |
        Use this operation to download the file to be signed for a signature request.<br>
        If the signature request is CLOSED or COMPLETED and the signed file is a PDF document that was uploaded to Woleet, this operation can also be used to download the amended document:
        this document is basically the signed file concatenated with the Signature Attestation document. The amended document contains the proof bundle as attachement, and is certified by Woleet.<br>
        The name of the file is included in the `Content-Disposition` header (see https://www.ietf.org/rfc/rfc6266.txt).<br>
        This is a publicly accessible endpoint: authentication is not required to download the file to be signed for a signature request (but its identifier needs to be known).
      operationId: downloadSignatureRequestFile
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          `true` if the amended version of the document is to be returned.
        explode: true
        in: query
        name: amended
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: The file to sign.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "404":
          description: Signature request not found.
      security: []
      summary: Download the file to sign.
      tags:
      - signatureRequest
      x-accepts: application/octet-stream
    post:
      description: |
        Use this operation to upload the file to be signed for a signature request.<br>
        The SHA256 hash of the uploaded file must be equal to the `hashToSign` property of the signature request or the upload fails.<br>
        Once uploaded, the file is stored and the `fileURL` property of the signature request is set, so that it can be used by a signature application to download and present the file to the signers.<br>
        Only **stateless** signature requests or **stateful** signature request in DRAFT state can be updated.
        **WARNING: the storage of the file to be signed is provided for convenience only: it is not required, and you should never upload a file if you have any concern about its privacy.**
      operationId: uploadSignatureRequestFile
      parameters:
      - description: Identifier of the signature request.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: The file to sign.
                  format: binary
                  type: string
              required:
              - file
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequest'
          description: File succesfully uploaded and linked to signature request.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "403":
          description: Forbidden. The file cannot be uploaded.
        "404":
          description: Signature request not found.
      summary: Upload the file to sign.
      tags:
      - signatureRequest
      x-contentType: multipart/form-data
      x-accepts: application/json
  /signatureRequest/{requestId}:
    delete:
      description: |
        Use this operation to delete a signature request.<br>
        **WARNING: You should never delete a signature request, otherwise you will no longer be able to download its proof bundle or Signature Attestation document.<br>
        Use this for test purpose only.**
      operationId: deleteSignatureRequest
      parameters:
      - description: Identifier of the signature request to delete.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: The signature request is deleted.
        "404":
          description: No signature request matching the given identifier.
      summary: Delete a signature request.
      tags:
      - signatureRequest
      x-accepts: application/json
    get:
      description: |
        Use this operation to retrieve a signature request by its identifier.<br>
        This is a publicly accessible endpoint: authentication is not required to retrieve a signature request (but its identifier needs to be known).<br>
        Nevertheless, if the caller is authenticated as the owner of the signature request, additional information is returned.
      operationId: getSignatureRequest
      parameters:
      - description: Identifier of the signature request to retrieve.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Secret identifier of the signer wanting to retrieve the signature request.<br>
          If set, information related to this signer is guaranteed to be returned in `authorizedSignees[0]`.<br>
          **This secret identifier is generated by the platform and provided by email to the signer only.
          It allows the platform to authenticate the signer and verify his email address.**
        explode: true
        in: query
        name: signeeId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequest'
          description: The signature request.
        "404":
          description: No signature request matching the given identifier.
      security:
      - BasicAuth: []
      - JWTAuth: []
      - {}
      summary: Get a signature request by its identifier.
      tags:
      - signatureRequest
      x-accepts: application/json
    put:
      description: |
        Use this operation to update a signature request.<br>
        Only the properties `name`, `public`, `callbackURL`, `activation`, `deadline`, `identityURL`, `fileName`, `fileURL`, `lang`, `vars`, `maxSignatures` and `authorizedSignees` can be modified.<br>
        Only **stateless** signature requests or **stateful** signature request in DRAFT state can be updated.
      operationId: updateSignatureRequest
      parameters:
      - description: Identifier of signature request to update.
        explode: false
        in: path
        name: requestId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureRequest'
        description: SignatureRequest object to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequest'
          description: The updated signature request.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "403":
          description: Forbidden. The signature request cannot be updated.
        "404":
          description: No signature request matching the given identifier.
      summary: Update a signature request.
      tags:
      - signatureRequest
      x-contentType: application/json
      x-accepts: application/json
  /signatureRequestIds:
    get:
      description: |
        Use this operation to retrieve the identifiers of all public signature requests having a given `hashToSign` property.<br>
        Only public signature request identifiers are returned.<br>
        This is a publicly accessible endpoint: authentication is not required to retrieve public signature request identifiers.<br>
        Paging is supported.
      operationId: searchSignatureRequestIds
      parameters:
      - description: Index of the page to retrieve (from 0).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: Number of signature request identifiers per page.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          `hashToSign` to search for: all public signature requests whose `hashToSign` property is equal are returned.
        explode: true
        in: query
        name: hashToSign
        required: true
        schema:
          type: string
        style: form
      - description: |
          User identifier to use to filter out results: only public signature requests belonging to this user are returned.
        explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequestIds'
          description: An array (possibly empty) of the identifiers of all public
            signature requests matching all search criteria, plus additional paging
            information.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
      security: []
      summary: Search for public signature request identifiers.
      tags:
      - signatureRequest
      x-accepts: application/json
  /signatureRequests:
    get:
      description: |
        Use this operation to retrieve all signature requests having a given `name` and/or `hashToSign` property.<br>
        Only requests belonging to the authenticated user are returned.<br>
        Paging and sorting is supported.
      operationId: searchSignatureRequests
      parameters:
      - description: Index of the page to retrieve (from 0).
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: Number of anchors per page.
        explode: true
        in: query
        name: size
        required: false
        schema:
          default: 20
          type: integer
        style: form
      - description: |
          Sorting direction: ASC for ascending DESC for descending.
        explode: true
        in: query
        name: direction
        required: false
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
        style: form
      - description: |
          Sorting property: possible values are limited to `created` and `hashToSign`.
        explode: true
        in: query
        name: sort
        required: false
        schema:
          default: created
          enum:
          - created
          - hashToSign
          type: string
        style: form
      - description: |
          `name` to search for: all signature requests whose `name` property contains this sub-string are returned.<br>
          **WARNING: Searching by name can timeout on a large signature request set.**
        explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - description: |
          `hashToSign` to search for: all signature requests whose `hashToSign` property is equal are returned.
        explode: true
        in: query
        name: hashToSign
        required: false
        schema:
          type: string
        style: form
      - description: |
          States to search for: all signature requests whose `state` property is part of theses states are returned.
        explode: false
        in: query
        name: states
        required: false
        schema:
          items:
            enum:
            - DRAFT
            - PENDING
            - IN_PROGRESS
            - COMPLETED
            - CLOSED
            - CANCELED
            - EXPIRED
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureRequests'
          description: An array (possibly empty) of all signature requests matching
            all search criteria, plus additional paging and sorting information.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
        "504":
          description: Can be triggered when searching by name if the request takes
            too long to process.
      summary: Search for signature requests.
      tags:
      - signatureRequest
      x-accepts: application/json
  /token:
    delete:
      description: |
        Use this operation to revoke a JWT token.<br>
        JWT tokens have no expiration date so are always valid: if you need to invalidate a token (eg. because you think it is compromised) you need to use this endpoint to inform the platform that this token must no longer be accepted.
      operationId: revokeToken
      parameters:
      - description: JWT token to revoke.
        explode: true
        in: query
        name: token
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: The JWT token is revoked.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
      summary: Revoke a JWT token.
      tags:
      - token
      x-accepts: application/json
    get:
      description: |
        Use this operation to generate a new JWT token.<br>
        JWT tokens can be used to authenticate to the API, using the `Bearer` scheme of the `Authorization` header, like:<br>
        `Authorization: Bearer {JWT token}`
      operationId: generateToken
      parameters:
      - description: |
          Client data to inject into the generated JWT token (64 characters max).<br>
          This data is not processed by the platform, and can be easily retrieved from the token by Base64 decoding its `payload`.
        explode: true
        in: query
        name: cdata
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/token'
          description: The JWT token.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
      summary: Generate a JWT token.
      tags:
      - token
      x-accepts: application/json
  /user/credits:
    get:
      description: Use this operation to get the remaining credits of the authenticated
        user.
      operationId: getCredits
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credits'
          description: The remaining credits.
      summary: Get user's credits.
      tags:
      - user
      x-accepts: application/json
  /user/tokens:
    get:
      description: Use this operation to list all JWT tokens registered for the authenticated
        user.
      operationId: getTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tokens'
          description: The list of JWT tokens of the user, possibly empty.
      summary: Get user's registered JWT tokens.
      tags:
      - user
      x-accepts: application/json
    put:
      description: Use this operation to update the list of JWT tokens registered
        for the authenticated user.
      operationId: putTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tokens'
        description: The list of JWT tokens to update.
        required: true
      responses:
        "200":
          description: The list of JWT tokens has been successfully updated.
        "400":
          description: Invalid request. More details are returned in the response
            body as a JSON object.
      summary: Update user's registered JWT tokens.
      tags:
      - user
      x-contentType: application/json
      x-accepts: application/json
  /user/callbackSecret:
    get:
      description: Use this operation to get the API callback secret.
      operationId: getCallbackSecret
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/callbackSecret'
          description: The current callback secret.
      summary: Get the current callback secret (null if not set).
      tags:
      - user
      x-accepts: application/json
    put:
      description: Use this operation to generate the API callback secret.
      operationId: updateCallbackSecret
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/callbackSecret'
          description: The newly generated callback secret.
      summary: Generates a new callback secret.
      tags:
      - user
      x-accepts: application/json
components:
  schemas:
    receipt:
      description: |
        A proof receipt:
        - the proof of timestamp is provided as a Chainpoint 2.x proof receipt.
        - the proof of signature (if applicable) is provided in the `signature` property.

        If the proof receipt is partial (ie. does not contain the proof of timestamp) Chainpoint 2.x properties are not provided.
      example:
        targetHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        signature:
          signatureRequestURL: signatureRequestURL
          signedIssuerDomain: acme.com
          signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          identityURL: https://wids.acme.com/identity
          signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
        merkleRoot: 55aaf75bb11ffc925e28940dfa9f0b48ed25ace18d561e41c95dd2aead65cc61
        proof:
        - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        anchors:
        - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: BTCOpReturn
        - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: BTCOpReturn
        type: ChainpointSHA256v2
        partial: true
      properties:
        targetHash:
          description: |
            Chainpoint 2.x: SHA256 hash of the proven data or signature.
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
        type:
          description: |
            Chainpoint 2.x: Type of the proof receipt.<br>
            **Currently only 'ChainpointSHA256v2' is supported.**
          example: ChainpointSHA256v2
          type: string
        merkleRoot:
          description: |
            Chainpoint 2.x: Root of the Merkle tree.
          example: 55aaf75bb11ffc925e28940dfa9f0b48ed25ace18d561e41c95dd2aead65cc61
          type: string
        proof:
          description: |
            Chainpoint 2.x: Merkle proof (path from `targetHash` to `merkleRoot` in the Merkle tree).
          items:
            $ref: '#/components/schemas/receipt_proof_node'
          type: array
        anchors:
          description: |
            Chainpoint 2.x: List of sources where the root of the Merkle proof is anchored.
          items:
            $ref: '#/components/schemas/receipt_anchors_node'
          type: array
        partial:
          description: |
            `true` if the receipt is a partial receipt (ie. does not contain the Chainpoint 2.x proof of timestamp).
          type: boolean
        signature:
          $ref: '#/components/schemas/receipt_signature'
      type: object
    receipt_proof_node:
      example:
        left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
      properties:
        left:
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
        right:
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
      type: object
    receipt_anchors_node:
      example:
        sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        type: BTCOpReturn
      properties:
        type:
          description: |
            Type of the anchor.<br>
            **Currently only 'BTCOpReturn' is supported.**
          example: BTCOpReturn
          type: string
        sourceId:
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
      type: object
    receipt_signature:
      description: Proof of signature (only for proof of seal/signature receipts).
      example:
        signatureRequestURL: signatureRequestURL
        signedIssuerDomain: acme.com
        signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
        signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        identityURL: https://wids.acme.com/identity
        signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
        pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
      properties:
        signedHash:
          description: SHA256 hash of the signed data.
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
        signedIdentity:
          description: X500 Distinguished Name representing the signed identity.
          example: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          type: string
        signedIssuerDomain:
          description: Domain name of the identity server.
          example: acme.com
          type: string
        pubKey:
          description: |
            Public key of the signer.<br>
            **Currently only Bitcoin addresses are supported.**
          example: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          type: string
        signature:
          description: |
            Signature of the `signedHash` property using the public key `pubKey`, or, if any of `signedIdentity` or `signedIssuerDomain` is provided,
            signature of SHA256(`signedHash` + `signedIdentity` + `signedIssuerDomain`) using the public key `pubKey`.
          example: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          type: string
        identityURL:
          description: |
            Web hook of the identity server to use to verify the signer's identity.
          example: https://wids.acme.com/identity
          type: string
        signatureRequestURL:
          description: |
            URL of the signature request.<br>
            **This property is only set for proof of signature receipts.**
          type: string
      type: object
    otsReceipt:
      description: An OpenTimestamps proof receipt.
      format: binary
      type: string
    pdfFile:
      description: A PDF file.
      format: binary
      type: string
    signatureRequest:
      example:
        fileName: NDA.pdf
        identityURL: https://wids.acme.com/identity
        watchers:
        - commonName: John Doe
          vars: '{"requesterName":"ACME Corp."}'
          lang: fr
          email: john.doe@acme.com
        - commonName: John Doe
          vars: '{"requesterName":"ACME Corp."}'
          lang: fr
          email: john.doe@acme.com
        hashToSign: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        anchors:
        - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
          signedIssuerDomain: acme.com
          signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          created: 1620294758688
          notifyByEmail: true
          identityURL: https://wids.acme.com/identity
          txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          confirmations: 6
          signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          tags: '["book","sci-fi"]'
          public: true
          signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
          name: My anchor
          signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          callbackURL: https://acme.com/callback/woleet/anchor
          id: abcdef01-2345-6789-abcd-ef0123456789
          lastModified: 1620294759999
          hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
          status: WAIT
          timestamp: 1620294759999
        - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
          signedIssuerDomain: acme.com
          signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          created: 1620294758688
          notifyByEmail: true
          identityURL: https://wids.acme.com/identity
          txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          confirmations: 6
          signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          tags: '["book","sci-fi"]'
          public: true
          signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
          name: My anchor
          signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          callbackURL: https://acme.com/callback/woleet/anchor
          id: abcdef01-2345-6789-abcd-ef0123456789
          lastModified: 1620294759999
          hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
          status: WAIT
          timestamp: 1620294759999
        baseVarsKey: mySignatureRequestsSharedVars
        public: true
        proofBundleComplete: true
        callbackURL: https://acme.com/callback/woleet/signatureRequest
        fileURL: https://acme.com/files/NDA.pdf
        id: abcdef01-2345-6789-abcd-ef0123456789
        vars: '{"requesterName":"ACME Corp."}'
        lang: fr
        deadline: 1720294759999
        ordered: true
        auditTrailAnchorId: abcdef01-2345-6789-abcd-ef0123456789
        created: 1620294758688
        maxSignatures: 10
        auditTrailData: eyJhdWRpdENvbnRleHQiOnsiaWQiOiJiNzkwNDMyYi1kNjYyLTQ2MzMtOGNjMi0xMjc0ODZiMjYzYjgiLCJuYW1lIjoiU2FtcGxlIn0sImF1ZGl0RXZlbnRzIjpbeyJkYXRlIjoxNjIyMTk5NTA5NDExLCJ0eXBlIjoiQ0xPU0VEIn1dfQo=
        authorizedSignees:
        - commonName: John Doe
          identityURL: https://wids.acme.com/identity
          OTP: OTP
          anchorId: abcdef01-2345-6789-abcd-ef0123456789
          signedOn: 1620294759999
          countryCallingCode: "33"
          phone: "612345678"
          requiresOTP: true
          signsFaceToFace: true
          feedbackMessage: Signer feedback message
          vars: '{"requesterName":"ACME Corp."}'
          id: id
          lang: fr
          device: SERVER
          feedbackSubject: Signer feedback subject
          auditTrailId: abcdef01-2345-6789-abcd-ef0123456789
          email: john.doe@acme.com
          pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
        - commonName: John Doe
          identityURL: https://wids.acme.com/identity
          OTP: OTP
          anchorId: abcdef01-2345-6789-abcd-ef0123456789
          signedOn: 1620294759999
          countryCallingCode: "33"
          phone: "612345678"
          requiresOTP: true
          signsFaceToFace: true
          feedbackMessage: Signer feedback message
          vars: '{"requesterName":"ACME Corp."}'
          id: id
          lang: fr
          device: SERVER
          feedbackSubject: Signer feedback subject
          auditTrailId: abcdef01-2345-6789-abcd-ef0123456789
          email: john.doe@acme.com
          pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
        testMode: true
        name: Non-disclosure agreement
        lastModified: 1620294759999
        activation: 1720294759999
      properties:
        id:
          description: Signature request identifier. It is allocated by the platform,
            and so must not be provided at creation time.
          example: abcdef01-2345-6789-abcd-ef0123456789
          readOnly: true
          type: string
        created:
          description: Date of creation (in milliseconds since Unix epoch).
          example: 1620294758688
          format: int64
          readOnly: true
          type: integer
        lastModified:
          description: Date of last modification (in milliseconds since Unix epoch).
          example: 1620294759999
          format: int64
          readOnly: true
          type: integer
        name:
          description: Name of the signature request (doesn't need to be unique).
          example: Non-disclosure agreement
          type: string
        state:
          $ref: '#/components/schemas/signatureRequestState'
        callbackURL:
          description: |
            Web hook to be called by the platform whenever:
            - the `state` property changes
            - a new signature is registered
            - the `proofBundleComplete` property is set to `true` by the platform (which means that the proof bundle and the Signature Attestation document are ready to download)

            The platform does a POST request on this URL with the signature request as a JSON object in the request body. The domain of the URL must resolve to an external IP address.<br>
            Verifying the authenticity of the callback can be done by checking the HMAC-SHA1 signature of the request body provided by the platform in the `x-woleet-signature` header.<br>
            Please refer to <a target="_blank" href="https://doc.woleet.io/reference/using-callbacks">this documentation</a> for more details.
          example: https://acme.com/callback/woleet/signatureRequest
          type: string
        vars:
          description: |
            The set of variables (key/value pairs) to use to customize the signature request workflow.<br>
            Values must be of type null, boolean, string or number: nested JSON objects are not allowed.<br>
            In particular, these variables can be used to customize the various email sent and disable some of these emails.<br>
            Please refer to <a target="_blank" href="https://doc.woleet.io/reference/custom-signature-workflow">this documentation</a> for more details.<br>
            **This property is only available to the owner and the signers of the signature request.**
          example: '{"requesterName":"ACME Corp."}'
          type: object
        baseVarsKey:
          description: |
            The key of an object in the user's k/v store to use as the base value of the `vars` property.<br>
            Properties defined in this object are overwritten by those defined in the `vars` property.<br>
            **Use this property to store large customization variables shared by multiple signature requests (like email tempates).**
          example: mySignatureRequestsSharedVars
          type: string
        lang:
          description: The preferred language (provided as an ISO 639-1 string) to
            use when emailing the signers.
          example: fr
          type: string
        public:
          description: |
            `true` (or unset) if the signature request is public (ie. discoverable by its `hashToSign`) or `false` if it must be private (ie. not discoverable).<br>
            **Signature anchors created in the scope of a signature request inherit from its `public` property.**
          type: boolean
        hashToSign:
          description: |
            SHA256 hash of the file to sign.<br>
            The value must be provided as an hexadecimal lowercase string. The hash of the empty file is forbidden.<br>
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
        activation:
          description: |
            Date of activation of the signature request (in milliseconds since Unix epoch).<br>
            When set, the platform waits for it before transitioning the signature request from PENDING to IN_PROGRESS automatically.<br>
            When not set, the platform transitions the signature request to IN_PROGRESS as soon as the signature request is transitioned to PENDING.<br>
            **Only stateful signature request can have an activation date.**
          example: 1720294759999
          format: int64
          type: integer
        deadline:
          description: |
            Deadline of the signature request (in milliseconds since Unix epoch).<br>
            When not set or null, no deadline is applied.<br>
            If set, signatures registered after the deadline are refused.
          example: 1720294759999
          format: int64
          type: integer
        identityURL:
          description: |
            Web hook of the identity server to use to verify the signer's identity.<br>
            If set, it is used at signature registration time to verify the identity of the signers.
          example: https://wids.acme.com/identity
          type: string
        fileName:
          description: |
            Name of the file to sign.<br>
            If set, the signature application can use it to give an indication about the file to the signers.
          example: NDA.pdf
          type: string
        fileURL:
          description: |
            Public URL of the file to sign.<br>
            If set, the signature application can use it to download and present the file to the signers.
          example: https://acme.com/files/NDA.pdf
          type: string
        maxSignatures:
          description: |
            Maximum number of signatures to accept for this signature request.<br>
            When not set or null, no maximum is applied.<br>
            This property and the `authorizedSignees` property are mutually exclusive.<br>
            **This property is only available to the owner of the signature request.**
          example: 10
          format: int32
          type: integer
        authorizedSignees:
          description: |
            List of all signers authorized to register their signature (no duplicate is authorized).<br>
            When not set or null, anybody can sign the signature request.<br>
            If set, signers not being part of this list are not allowed to register their signature.<br>
            This property and the `maxSignatures` property are mutually exclusive.
          items:
            $ref: '#/components/schemas/authorizedSignee'
          type: array
        watchers:
          description: |
            List of all watchers to notify by email about the progress of the signature request.<br>
            The set of events being notified are:
            - the signature request is activated
            - a signer signs the signature request
            - the signature request is canceled
            - the signature request is closed or completed and the Signature Attestation document is ready

            **This property is only available to the owner of the signature request.**
          items:
            $ref: '#/components/schemas/watcher'
          type: array
        ordered:
          description: |
            `true` if the signers must sign in their order of appearance in the `authorizedSignees` list.<br>
            In this mode, each signer is notified only once the previous signer completes his signature.<br>
            **Only stateful signature request can be ordered.**
          type: boolean
        anchors:
          description: |
            List of signature anchors created in the scope of this signature request<br>
            A signature anchor is created each time a new signature is registered.
          items:
            $ref: '#/components/schemas/anchor'
          readOnly: true
          type: array
        auditTrailData:
          description: |
            Audit trail data.<br>
            When the signature request is COMPLETED (by the platform) or CLOSED (by the requester) its audit trail
            (ie. the list of events recorded by the platform during the signature request workflow) is serialized to a
            JSON object and Base64 encoded. This data is then signed by the platform and recorded in this property.
          example: eyJhdWRpdENvbnRleHQiOnsiaWQiOiJiNzkwNDMyYi1kNjYyLTQ2MzMtOGNjMi0xMjc0ODZiMjYzYjgiLCJuYW1lIjoiU2FtcGxlIn0sImF1ZGl0RXZlbnRzIjpbeyJkYXRlIjoxNjIyMTk5NTA5NDExLCJ0eXBlIjoiQ0xPU0VEIn1dfQo=
          readOnly: true
          type: string
        auditTrailAnchorId:
          description: |
            Identifier of the signature anchor created by the platform to seal the audit trail data.<br>
            This property is set only once the audit trail is generated and can be used to retrieve its proof receipt.
          example: abcdef01-2345-6789-abcd-ef0123456789
          readOnly: true
          type: string
        proofBundleComplete:
          description: |
            `true` when all pieces of evidence are available.<br>
            The proof bundle and the Signature Attestation are ready to download.
          readOnly: true
          type: boolean
        testMode:
          description: |
            **WARNING: Do not use (test purpose only).**
          type: boolean
      required:
      - hashToSign
      - name
      type: object
    signatureRequestState:
      description: |
        State of the signature request.<br>
        If not set, the signature request is **stateless** and can be updated at any time (eg. to add new signers on the fly).<br>
        If set to DRAFT at creation time, the signature request is **stateful** and its state can be transitioned using the `/signatureRequest/{requestId}/transition` endpoint.<br>
        Available states:
        - DRAFT: the signature request is being edited (only DRAFT signature requests can be updated)
        - PENDING: the signature request is waiting for its activation date to be reached
        - IN_PROGRESS: the signature request emails have been sent to the signers (if applicable) and the signatures are being collected
        - COMPLETED: all signatures have been collected
        - CLOSED: the signature request has been closed by the owner before all signatures could be collected
        - CANCELED: the signature request has been canceled by the owner before all signatures could be collected
        - EXPIRED: the deadline of the signature request has been reached before all signatures could be collected
      enum:
      - DRAFT
      - PENDING
      - IN_PROGRESS
      - COMPLETED
      - CLOSED
      - CANCELED
      - EXPIRED
      type: string
    signatureRequests:
      example:
        number: 1
        last: true
        numberOfElements: 0
        size: 6
        content:
        - fileName: NDA.pdf
          identityURL: https://wids.acme.com/identity
          watchers:
          - commonName: John Doe
            vars: '{"requesterName":"ACME Corp."}'
            lang: fr
            email: john.doe@acme.com
          - commonName: John Doe
            vars: '{"requesterName":"ACME Corp."}'
            lang: fr
            email: john.doe@acme.com
          hashToSign: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          anchors:
          - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
            signedIssuerDomain: acme.com
            signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
            created: 1620294758688
            notifyByEmail: true
            identityURL: https://wids.acme.com/identity
            txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            confirmations: 6
            signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
            tags: '["book","sci-fi"]'
            public: true
            signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
            name: My anchor
            signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            callbackURL: https://acme.com/callback/woleet/anchor
            id: abcdef01-2345-6789-abcd-ef0123456789
            lastModified: 1620294759999
            hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
            status: WAIT
            timestamp: 1620294759999
          - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
            signedIssuerDomain: acme.com
            signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
            created: 1620294758688
            notifyByEmail: true
            identityURL: https://wids.acme.com/identity
            txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            confirmations: 6
            signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
            tags: '["book","sci-fi"]'
            public: true
            signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
            name: My anchor
            signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            callbackURL: https://acme.com/callback/woleet/anchor
            id: abcdef01-2345-6789-abcd-ef0123456789
            lastModified: 1620294759999
            hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
            status: WAIT
            timestamp: 1620294759999
          baseVarsKey: mySignatureRequestsSharedVars
          public: true
          proofBundleComplete: true
          callbackURL: https://acme.com/callback/woleet/signatureRequest
          fileURL: https://acme.com/files/NDA.pdf
          id: abcdef01-2345-6789-abcd-ef0123456789
          vars: '{"requesterName":"ACME Corp."}'
          lang: fr
          deadline: 1720294759999
          ordered: true
          auditTrailAnchorId: abcdef01-2345-6789-abcd-ef0123456789
          created: 1620294758688
          maxSignatures: 10
          auditTrailData: eyJhdWRpdENvbnRleHQiOnsiaWQiOiJiNzkwNDMyYi1kNjYyLTQ2MzMtOGNjMi0xMjc0ODZiMjYzYjgiLCJuYW1lIjoiU2FtcGxlIn0sImF1ZGl0RXZlbnRzIjpbeyJkYXRlIjoxNjIyMTk5NTA5NDExLCJ0eXBlIjoiQ0xPU0VEIn1dfQo=
          authorizedSignees:
          - commonName: John Doe
            identityURL: https://wids.acme.com/identity
            OTP: OTP
            anchorId: abcdef01-2345-6789-abcd-ef0123456789
            signedOn: 1620294759999
            countryCallingCode: "33"
            phone: "612345678"
            requiresOTP: true
            signsFaceToFace: true
            feedbackMessage: Signer feedback message
            vars: '{"requesterName":"ACME Corp."}'
            id: id
            lang: fr
            device: SERVER
            feedbackSubject: Signer feedback subject
            auditTrailId: abcdef01-2345-6789-abcd-ef0123456789
            email: john.doe@acme.com
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          - commonName: John Doe
            identityURL: https://wids.acme.com/identity
            OTP: OTP
            anchorId: abcdef01-2345-6789-abcd-ef0123456789
            signedOn: 1620294759999
            countryCallingCode: "33"
            phone: "612345678"
            requiresOTP: true
            signsFaceToFace: true
            feedbackMessage: Signer feedback message
            vars: '{"requesterName":"ACME Corp."}'
            id: id
            lang: fr
            device: SERVER
            feedbackSubject: Signer feedback subject
            auditTrailId: abcdef01-2345-6789-abcd-ef0123456789
            email: john.doe@acme.com
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          testMode: true
          name: Non-disclosure agreement
          lastModified: 1620294759999
          activation: 1720294759999
        - fileName: NDA.pdf
          identityURL: https://wids.acme.com/identity
          watchers:
          - commonName: John Doe
            vars: '{"requesterName":"ACME Corp."}'
            lang: fr
            email: john.doe@acme.com
          - commonName: John Doe
            vars: '{"requesterName":"ACME Corp."}'
            lang: fr
            email: john.doe@acme.com
          hashToSign: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          anchors:
          - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
            signedIssuerDomain: acme.com
            signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
            created: 1620294758688
            notifyByEmail: true
            identityURL: https://wids.acme.com/identity
            txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            confirmations: 6
            signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
            tags: '["book","sci-fi"]'
            public: true
            signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
            name: My anchor
            signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            callbackURL: https://acme.com/callback/woleet/anchor
            id: abcdef01-2345-6789-abcd-ef0123456789
            lastModified: 1620294759999
            hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
            status: WAIT
            timestamp: 1620294759999
          - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
            signedIssuerDomain: acme.com
            signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
            created: 1620294758688
            notifyByEmail: true
            identityURL: https://wids.acme.com/identity
            txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            confirmations: 6
            signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
            tags: '["book","sci-fi"]'
            public: true
            signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
            name: My anchor
            signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            callbackURL: https://acme.com/callback/woleet/anchor
            id: abcdef01-2345-6789-abcd-ef0123456789
            lastModified: 1620294759999
            hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
            status: WAIT
            timestamp: 1620294759999
          baseVarsKey: mySignatureRequestsSharedVars
          public: true
          proofBundleComplete: true
          callbackURL: https://acme.com/callback/woleet/signatureRequest
          fileURL: https://acme.com/files/NDA.pdf
          id: abcdef01-2345-6789-abcd-ef0123456789
          vars: '{"requesterName":"ACME Corp."}'
          lang: fr
          deadline: 1720294759999
          ordered: true
          auditTrailAnchorId: abcdef01-2345-6789-abcd-ef0123456789
          created: 1620294758688
          maxSignatures: 10
          auditTrailData: eyJhdWRpdENvbnRleHQiOnsiaWQiOiJiNzkwNDMyYi1kNjYyLTQ2MzMtOGNjMi0xMjc0ODZiMjYzYjgiLCJuYW1lIjoiU2FtcGxlIn0sImF1ZGl0RXZlbnRzIjpbeyJkYXRlIjoxNjIyMTk5NTA5NDExLCJ0eXBlIjoiQ0xPU0VEIn1dfQo=
          authorizedSignees:
          - commonName: John Doe
            identityURL: https://wids.acme.com/identity
            OTP: OTP
            anchorId: abcdef01-2345-6789-abcd-ef0123456789
            signedOn: 1620294759999
            countryCallingCode: "33"
            phone: "612345678"
            requiresOTP: true
            signsFaceToFace: true
            feedbackMessage: Signer feedback message
            vars: '{"requesterName":"ACME Corp."}'
            id: id
            lang: fr
            device: SERVER
            feedbackSubject: Signer feedback subject
            auditTrailId: abcdef01-2345-6789-abcd-ef0123456789
            email: john.doe@acme.com
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          - commonName: John Doe
            identityURL: https://wids.acme.com/identity
            OTP: OTP
            anchorId: abcdef01-2345-6789-abcd-ef0123456789
            signedOn: 1620294759999
            countryCallingCode: "33"
            phone: "612345678"
            requiresOTP: true
            signsFaceToFace: true
            feedbackMessage: Signer feedback message
            vars: '{"requesterName":"ACME Corp."}'
            id: id
            lang: fr
            device: SERVER
            feedbackSubject: Signer feedback subject
            auditTrailId: abcdef01-2345-6789-abcd-ef0123456789
            email: john.doe@acme.com
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          testMode: true
          name: Non-disclosure agreement
          lastModified: 1620294759999
          activation: 1720294759999
        first: true
      properties:
        content:
          description: Array of signature requests matching the search criteria.
          items:
            $ref: '#/components/schemas/signatureRequest'
          type: array
        first:
          description: |
            `true` if this is the first page.
          type: boolean
        last:
          description: |
            `true` if this is the last page.
          type: boolean
        numberOfElements:
          description: Number of requests in the retrieved page.
          type: integer
        size:
          description: Number of requests per page.
          type: integer
        number:
          description: Index of the retrieved page (from 0).
          type: integer
      type: object
    signatureRequestIds:
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 0
        content:
        - content
        - content
        first: true
        totalElements: 6
      properties:
        content:
          description: Array of identifiers of signature requests matching the search
            criteria.
          items:
            type: string
          type: array
        first:
          description: |
            `true` if this is the first page.
          type: boolean
        last:
          description: |
            `true` if this is the last page.
          type: boolean
        totalPages:
          description: Total number of pages available.
          type: integer
        totalElements:
          description: Total number of signature requests matching the search criteria.
          type: integer
        numberOfElements:
          description: Number of signature requests in the retrieved page.
          type: integer
        size:
          description: Number of signature requests per page.
          type: integer
        number:
          description: Index of the retrieved page (from 0).
          type: integer
      type: object
    authorizedSignee:
      example:
        commonName: John Doe
        identityURL: https://wids.acme.com/identity
        OTP: OTP
        anchorId: abcdef01-2345-6789-abcd-ef0123456789
        signedOn: 1620294759999
        countryCallingCode: "33"
        phone: "612345678"
        requiresOTP: true
        signsFaceToFace: true
        feedbackMessage: Signer feedback message
        vars: '{"requesterName":"ACME Corp."}'
        id: id
        lang: fr
        device: SERVER
        feedbackSubject: Signer feedback subject
        auditTrailId: abcdef01-2345-6789-abcd-ef0123456789
        email: john.doe@acme.com
        pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
      properties:
        commonName:
          description: The full name of the signer.
          example: John Doe
          type: string
        email:
          description: |
            The email of the signer.<br>
            Two signers cannot have the same email.<br>
            If set, `commonName` must also be set.
          example: john.doe@acme.com
          type: string
        countryCallingCode:
          description: |
            The country calling code of the signer (numbers only, no white space).
          example: "33"
          type: string
        phone:
          description: |
            The phone number of the signer (not including the country calling code, numbers only, no white spaces).<br>
            Two signers cannot have the same phone number.<br>
            If set, `commonName` must also be set.<br>
            This phone number must support SMS delivery.
          example: "612345678"
          type: string
        requiresOTP:
          description: |
            `true` if the signer must provide an OTP to sign.<br>
            If `true`, `phone` must be set, since the OTP is sent by SMS.
          type: boolean
        signsFaceToFace:
          description: |
            `true` if the signer must sign face-to-face, or `false` (or unset) if the signer must sign using the regular signature workflow.<br>
            If `true`, `requiresOTP` must also be `true`.
          type: boolean
        vars:
          description: |
            The set of variables (key/value pairs) to use to customize the signature request workflow for this signer.<br>
            Values must be of type null, boolean, string or number: nested JSON objects are not allowed.<br>
            Variables defined here overwrites the ones defined at signature request level when emailing the signer.<br>
            **This property is only available to the owner and the signers of the signature request.**
          example: '{"requesterName":"ACME Corp."}'
          type: object
        lang:
          description: |
            The preferred language (provided as an ISO 639-1 string) to use when emailing the signer.<br>
            If set, this property overwrites the `lang` property defined at signature request level.
          example: fr
          type: string
        pubKey:
          description: |
            The public key the signer must use to sign.<br>
            If not set, the signer can use any key to sign.<br>
            **Currently only Bitcoin addresses are supported.**
          example: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          type: string
        device:
          description: |
            The type of device the signer should use to sign:
            - SERVER: Woleet.ID Server or equivalent
            - MOBILE: Woleet.ID Mobile or equivalent
            - NANO: Ledger Nano S or equivalent

            If set, the signature application can use it to propose only the corresponding signature mode.
          enum:
          - SERVER
          - MOBILE
          - NANO
          type: string
        identityURL:
          description: |
            Web hook of the identity server to use to verify the signer's identity.
            If set, this property overwrites the `identityURL` property defined at signature request level.
          example: https://wids.acme.com/identity
          type: string
        feedbackSubject:
          description: |
            Last feedback subject reported by the signer to the owner of the signature request.<br>
            **This property is only available to the owner of the signature request.**
          example: Signer feedback subject
          readOnly: true
          type: string
        feedbackMessage:
          description: |
            Last feedback message reported by the signer to the owner of the signature request.<br>
            **This property is only available to the owner of the signature request.**
          example: Signer feedback message
          readOnly: true
          type: string
        anchorId:
          description: If the signer has signed, identifier of the signature anchor
            created.
          example: abcdef01-2345-6789-abcd-ef0123456789
          readOnly: true
          type: string
        signedOn:
          description: If the signer has signed, date of signature (in milliseconds
            since Unix epoch).
          example: 1620294759999
          format: int64
          readOnly: true
          type: integer
        auditTrailId:
          description: Identifier of the signer in the audit trail.
          example: abcdef01-2345-6789-abcd-ef0123456789
          readOnly: true
          type: string
        id:
          description: |
            **WARNING: Do not use (test purpose only).**
          readOnly: true
          type: string
        OTP:
          description: |
            **WARNING: Do not use (test purpose only).**
          readOnly: true
          type: string
      type: object
    watcher:
      description: A watcher of the signature request.
      example:
        commonName: John Doe
        vars: '{"requesterName":"ACME Corp."}'
        lang: fr
        email: john.doe@acme.com
      properties:
        email:
          description: The email of the watcher.
          example: john.doe@acme.com
          type: string
        commonName:
          description: The full name of the watcher.
          example: John Doe
          type: string
        vars:
          description: |
            The set of variables (key/value pairs) to use to customize the signature request workflow for this watcher.<br>
            Values must be of type null, boolean, string or number: nested JSON objects are not allowed.<br>
            Variables defined here overwrites the ones defined at signature request level when emailing the watcher.
          example: '{"requesterName":"ACME Corp."}'
          type: object
        lang:
          description: |
            The preferred language (provided as an ISO 639-1 string) to use when emailing the watcher.<br>
            If set, this property overwrites the `lang` property defined at signature request level.
          example: fr
          type: string
      required:
      - email
      type: object
    signatureRequestSign:
      properties:
        signature:
          description: |
            Signature of the `hashToSign` property of the signature request using the public key `pubKey`, or, if any of `signedIdentity` or `signedIssuerDomain` is provided,
            signature of SHA256(`hashToSign` + `signedIdentity` + `signedIssuerDomain`) using the public key `pubKey`.
          example: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          type: string
        pubKey:
          description: Public key used to sign.
          example: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          type: string
        signedIdentity:
          description: |
            X500 Distinguished Name representing the signed identity.<br>
            If set, the CN (common name) and EMAILADDRESS (email address) attributes must match the common name and email address of the signer as set in the signature request.
          example: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          type: string
        signedIssuerDomain:
          description: |
            Domain name of the identity server.<br>
            If set, the domain name of the identity URL must be included in the `signedIssuerDomain` domain name.
          example: acme.com
          type: string
        identityURL:
          description: |
            Web hook of the identity server to use to verify the signer's identity.<br>
            If set, it is used in place of the `identityURL` property of the signer to create the signature anchor.
          example: https://wids.acme.com/identity
          type: string
        device:
          description: |
            Type of device used to sign:
            - SERVER: Woleet.ID Server or equivalent
            - MOBILE: Woleet.ID Mobile or equivalent
            - NANO: Ledger Nano S or equivalent
          enum:
          - SERVER
          - MOBILE
          - NANO
          type: string
        signeeId:
          description: |
            Secret identifier of the signer (provided by email).<br>
            Only required if `pubKey` was not set for thìs signer.
          example: abcdef01-2345-6789-abcd-ef0123456789
          type: string
        OTP:
          description: |
            OTP of the signer (only required if `requiresOTP` was set to `true` for thìs signer).
          example: "123456"
          type: string
      required:
      - pubKey
      - signature
      type: object
    signatureRequestDelegate:
      properties:
        signeeId:
          description: Secret identifier of the signer (provided by email).
          example: abcdef01-2345-6789-abcd-ef0123456789
          type: string
        OTP:
          description: |
            OTP of the signer (only required if `requiresOTP` was set to `true` for thìs signer).
          example: "123456"
          type: string
      required:
      - signeeId
      type: object
    signatureRequestFeedback:
      properties:
        signeeId:
          description: Secret identifier of the signer (provided by email).
          example: abcdef01-2345-6789-abcd-ef0123456789
          type: string
        subject:
          description: Feedback subject to report to the owner of the signature request.
          example: Signer feedback subject
          type: string
        message:
          description: Feedback message to report to the owner of the signature request.
          example: Signer feedback message
          type: string
      required:
      - message
      - signeeId
      - subject
      type: object
    signatureRequestEvent:
      properties:
        signeeId:
          description: Secret identifier of the signer (provided by email).
          example: abcdef01-2345-6789-abcd-ef0123456789
          type: string
        type:
          description: |
            Type of the event to report:
            - DATA_VERIFIED: the signer verified the integrity (ie. hash) of the data to sign
            - DATA_REVIEWED: the signer reviewed and acceted the data to sign
            - TCU_ACCEPTED: the signer reviewed and accepted the TCU
            - TCU_REFUSED: the signer refused the TCU
            - SIGN_ACCEPTED: the signer accepted to sign the data
            - SIGN_REFUSED: the signer refused to sign the data
          enum:
          - DATA_VERIFIED
          - DATA_REVIEWED
          - TCU_ACCEPTED
          - TCU_REFUSED
          - SIGN_ACCEPTED
          - SIGN_REFUSED
          type: string
        comment:
          description: Comment related to the event to report.
          example: Event comment
          type: string
      required:
      - signeeId
      - type
      type: object
    signatureRequestSignResult:
      example:
        anchorId: abcdef01-2345-6789-abcd-ef0123456789
      properties:
        anchorId:
          description: Identifier of the signature anchor created.
          example: abcdef01-2345-6789-abcd-ef0123456789
          type: string
      type: object
    signatureRequestProofBundle:
      description: A bundle of all the pieces of evidence of a signature request.
      example:
        signatureReceipts:
        - targetHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          signature:
            signatureRequestURL: signatureRequestURL
            signedIssuerDomain: acme.com
            signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
            signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            identityURL: https://wids.acme.com/identity
            signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          merkleRoot: 55aaf75bb11ffc925e28940dfa9f0b48ed25ace18d561e41c95dd2aead65cc61
          proof:
          - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          anchors:
          - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            type: BTCOpReturn
          - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            type: BTCOpReturn
          type: ChainpointSHA256v2
          partial: true
        - targetHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          signature:
            signatureRequestURL: signatureRequestURL
            signedIssuerDomain: acme.com
            signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
            signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            identityURL: https://wids.acme.com/identity
            signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          merkleRoot: 55aaf75bb11ffc925e28940dfa9f0b48ed25ace18d561e41c95dd2aead65cc61
          proof:
          - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          anchors:
          - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            type: BTCOpReturn
          - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            type: BTCOpReturn
          type: ChainpointSHA256v2
          partial: true
        auditTrailReceipt:
          targetHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          signature:
            signatureRequestURL: signatureRequestURL
            signedIssuerDomain: acme.com
            signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
            signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            identityURL: https://wids.acme.com/identity
            signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          merkleRoot: 55aaf75bb11ffc925e28940dfa9f0b48ed25ace18d561e41c95dd2aead65cc61
          proof:
          - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          - left: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            right: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          anchors:
          - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            type: BTCOpReturn
          - sourceId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
            type: BTCOpReturn
          type: ChainpointSHA256v2
          partial: true
        complete: true
        auditTrailData: auditTrailData
      properties:
        signatureReceipts:
          description: Proof receipts of the signatures of the file by the signers
          items:
            $ref: '#/components/schemas/receipt'
          type: array
        auditTrailReceipt:
          $ref: '#/components/schemas/receipt'
        auditTrailData:
          description: Audit trail data (Base64 encoded JSON object)
          type: string
        complete:
          description: |
            `true` if all pieces of evidence are present in the proof bundle, or `false` if not.<br>
            All the following conditions must be met:
            - the signature request is COMPLETED (by the platform) or CLOSED (by the requester)
            - the audit trail is generated and signed by the platform
            - all the proof receipts are available
          type: boolean
      type: object
    anchor:
      example:
        metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
        signedIssuerDomain: acme.com
        signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
        created: 1620294758688
        notifyByEmail: true
        identityURL: https://wids.acme.com/identity
        txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        confirmations: 6
        signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
        tags: '["book","sci-fi"]'
        public: true
        signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
        name: My anchor
        signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        callbackURL: https://acme.com/callback/woleet/anchor
        id: abcdef01-2345-6789-abcd-ef0123456789
        lastModified: 1620294759999
        hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
        pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
        status: WAIT
        timestamp: 1620294759999
      properties:
        id:
          description: Anchor identifier. It is allocated by the platform, and so
            must not be provided at creation time.
          example: abcdef01-2345-6789-abcd-ef0123456789
          readOnly: true
          type: string
        created:
          description: Date of creation (in milliseconds since Unix epoch).
          example: 1620294758688
          format: int64
          readOnly: true
          type: integer
        lastModified:
          description: Date of last modification (in milliseconds since Unix epoch).
          example: 1620294759999
          format: int64
          readOnly: true
          type: integer
        name:
          description: Name of the anchor (doesn't need to be unique).
          example: My anchor
          type: string
        hash:
          description: |
            SHA256 hash of the data to anchor.<br>
            The value must be provided as an hexadecimal lowercase string. The hash of the empty file is forbidden.<br>
            **This property must not be provided when creating a signature anchor: it is automatically set at creation time to the SHA256 hash of the `signature` property provided, meaning that the signature is the actual anchored data.**
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
        signedHash:
          description: |
            SHA256 hash of the signed data.<br>
            The value must be provided as an hexadecimal lowercase string. The hash of the empty file is forbidden.<br>
            **This property must not be provided when creating a data anchor.**
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          type: string
        signedIdentity:
          description: |
            X500 Distinguished Name representing the signed identity.<br>
            **This property must not be provided when creating a data anchor.**
          example: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          type: string
        signedIssuerDomain:
          description: |
            Domain name of the identity server.<br>
            If set, the domain name of the identity URL must be included in the `signedIssuerDomain` domain name.<br>
            **This property must not be provided when creating a data anchor.**
          example: acme.com
          type: string
        pubKey:
          description: |
            Public key of the signer.<br>
            **Currently only Bitcoin addresses are supported.**<br>
            **This property must not be provided when creating a data anchor.**
          example: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
          type: string
        signature:
          description: |
            Signature of the `signedHash` property using the public key `pubKey`, or, if any of the `signedIdentity` or `signedIssuerDomain` properties are provided,
            signature of SHA256(`signedHash` + `signedIdentity` + `signedIssuerDomain`) using the public key `pubKey`.<br>
            **Only Bitcoin signatures are currently supported.**<br>
            **This property must not be provided when creating a data anchor.**
          example: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          type: string
        identityURL:
          description: |
            Web hook of the identity server to use to verify the signer's identity.<br>
            It is used to verify that the server knows the `pubKey` public key and to get or check the identity of the user owning that key.<br>
            For proofs of seal, it is also used to verify that the identity server (itself identified by the TLS certificate of the URL)
            controls the key used to sign (ie. owns the private part of the key pair) by requesting it to sign some random data.<br>
            Please refer to <a target="_blank" href="https://app.swaggerhub.com/apis-docs/Woleet/WoleetIDServerAPI/#/Identity/getIdentity">Woleet.ID Server documentation</a> for more details.
          example: https://wids.acme.com/identity
          type: string
        signatureRequestId:
          description: |
            If the anchor is a signature anchor, identifier of the signature request.
          example: abcdef01-2345-6789-abcd-ef0123456789
          readOnly: true
          type: string
        public:
          description: |
            `true` (or unset) if the anchor is public (ie. discoverable by its `hash` or `signedHash`) or `false` if it must be private (ie. not discoverable).
          type: boolean
        notifyByEmail:
          description: |
            `true` if the proof receipt must be sent by email once available, or `false` (or unset) if not.
          type: boolean
        tags:
          description: |
            Set of tags associated to the anchor. There is no restriction on tag names, except they cannot contain spaces.<br>
            Tags are aimed at classifying and searching anchors.
          example: '["book","sci-fi"]'
          items:
            type: string
          type: array
        metadata:
          description: |
            A set of variables (key/values pairs) to store with the anchor.<br>
            Values must be of type null, boolean, string or number: nested JSON objects are not allowed.
          example: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
          type: object
        callbackURL:
          description: |
            Web hook to be called by the platform whenever the `status` property of the anchor changes.<br>
            The platform does a POST request on this URL with the anchor as a JSON object in the request body. The domain of the URL must resolve to an external IP address.<br>
            Verifying the authenticity of the callback can be done by checking the HMAC-SHA1 signature of the request body provided by the platform in the `x-woleet-signature` header.<br>
            Please refer to <a target="_blank" href="https://doc.woleet.io/reference/using-callbacks">this documentation</a> for more details.
          example: https://acme.com/callback/woleet/anchor
          type: string
        status:
          description: |
            Status of the anchor:
            - WAIT: waiting to be processed by the platform (the proof receipt is not yet available for download)
            - NEW: waiting to be sent to the blockchain (the proof receipt is not yet available for download)
            - SENT: sent to the blockchain (the proof receipt is ready to download)
            - CONFIRMED: confirmed at least 6 times by the blockchain (the proof receipt can be verified)
          enum:
          - WAIT
          - NEW
          - SENT
          - CONFIRMED
          readOnly: true
          type: string
        timestamp:
          description: |
            Proven timestamp of the data (for a data anchor) or of the signature (for a signature anchor).<br>
            This is the time of the Bitcoin block into which the anchoring process occurred (in milliseconds since Unix epoch).<br>
            Any data whose SHA256 hash equals this anchor's hash is proven to exist at that time and has not been modified since.<br>
            This property is set when the first confirmation of the Bitcoin block occurs. Once set, the associated proof receipt can be verified (without having to wait for 6 confirmations).
          example: 1620294759999
          format: int64
          readOnly: true
          type: integer
        confirmations:
          description: |
            Number of confirmations of the Bitcoin block into which the anchoring process occurred.<br>
            This property is set when the first confirmation of the Bitcoin block occurs, and removed once the block is confirmed at least 6 times.
          example: 6
          format: int32
          readOnly: true
          type: integer
        txId:
          description: Identifier of the Bitcoin transaction where the anchoring occurred.
          example: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          readOnly: true
          type: string
      required:
      - name
      type: object
    anchors:
      description: An array of anchors.
      example:
        number: 1
        last: true
        numberOfElements: 0
        size: 6
        content:
        - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
          signedIssuerDomain: acme.com
          signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          created: 1620294758688
          notifyByEmail: true
          identityURL: https://wids.acme.com/identity
          txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          confirmations: 6
          signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          tags: '["book","sci-fi"]'
          public: true
          signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
          name: My anchor
          signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          callbackURL: https://acme.com/callback/woleet/anchor
          id: abcdef01-2345-6789-abcd-ef0123456789
          lastModified: 1620294759999
          hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
          status: WAIT
          timestamp: 1620294759999
        - metadata: '{"title":"Ubik","author":"Philip K. Dick","read":true,"rank":10.0}'
          signedIssuerDomain: acme.com
          signature: IGcvQrBq8w7eJDekrOhy9sIqttmicMp47vzf77Dg4PJJfFdZVDVGeHki3pitfWrs6ysoccKUK0xEx7Da2Cb8ljw=
          created: 1620294758688
          notifyByEmail: true
          identityURL: https://wids.acme.com/identity
          txId: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          confirmations: 6
          signedIdentity: CN=John Doe,EMAILADDRESS=john.doe@acme.com
          tags: '["book","sci-fi"]'
          public: true
          signatureRequestId: abcdef01-2345-6789-abcd-ef0123456789
          name: My anchor
          signedHash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          callbackURL: https://acme.com/callback/woleet/anchor
          id: abcdef01-2345-6789-abcd-ef0123456789
          lastModified: 1620294759999
          hash: abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789
          pubKey: 1GChJMuyxvq28F3Uksqf5v7QkxQ4WLQdBh
          status: WAIT
          timestamp: 1620294759999
        first: true
      properties:
        content:
          description: Array of anchors matching the search criteria.
          items:
            $ref: '#/components/schemas/anchor'
          type: array
        first:
          description: |
            `true` if this is the first page.
          type: boolean
        last:
          description: |
            `true` if this is the last page.
          type: boolean
        numberOfElements:
          description: Number of anchors in the retrieved page.
          type: integer
        size:
          description: Number of anchors per page.
          type: integer
        number:
          description: Index of the retrieved page (from 0).
          type: integer
      type: object
    anchorIds:
      description: An array of anchor identifiers.
      example:
        number: 5
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 0
        content:
        - content
        - content
        first: true
        totalElements: 6
      properties:
        content:
          description: Array of identifiers of anchors matching the search criteria.
          items:
            type: string
          type: array
        first:
          description: |
            `true` if this is the first page.
          type: boolean
        last:
          description: |
            `true` if this is the last page.
          type: boolean
        totalPages:
          description: Total number of pages available.
          type: integer
        totalElements:
          description: Total number of anchors matching the search criteria.
          type: integer
        numberOfElements:
          description: Number of anchors in the retrieved page.
          type: integer
        size:
          description: Number of anchors per page.
          type: integer
        number:
          description: Index of the retrieved page (from 0).
          type: integer
      type: object
    receiptVerificationStatus:
      example:
        timestampVerificationStatus:
          code: VERIFIED
          text: text
          confirmations: 6
          timestamp: 1620294758688
        code: VERIFIED
        identityVerificationStatus:
          code: VERIFIED
          certificates:
          - subject:
              ST: Britanny
              C: FR
              OU: Sales Dept.
              EMAILADDRESS: john.doe@acme.com
              CN: John Doe
              L: Rennes
              O: ACME Corp.
            issuer:
              ST: Britanny
              C: FR
              OU: Sales Dept.
              EMAILADDRESS: john.doe@acme.com
              CN: John Doe
              L: Rennes
              O: ACME Corp.
          - subject:
              ST: Britanny
              C: FR
              OU: Sales Dept.
              EMAILADDRESS: john.doe@acme.com
              CN: John Doe
              L: Rennes
              O: ACME Corp.
            issuer:
              ST: Britanny
              C: FR
              OU: Sales Dept.
              EMAILADDRESS: john.doe@acme.com
              CN: John Doe
              L: Rennes
              O: ACME Corp.
          identity:
            commonName: John Doe
            country: FR
            organization: ACME Corp.
            locality: Rennes
            organizationalUnit: Sales Dept.
          text: text
          key:
            name: John Doe key
            expiration: 1569542400000
            revokedAt: 1569542400000
            pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
            status: valid
        text: text
        confirmations: 6
        signatureVerificationStatus:
          code: VERIFIED
          text: text
        timestamp: 1620294758688
      properties:
        code:
          description: |
            Proof receipt verification status code:
            - VERIFIED: success: the proof receipt is verified: both the proof of timestamp AND the proof of signature (if applicable) are valid (but the proof of identity may be invalid)
            - INVALID_SIGNATURE: error: the proof of signature is invalid
            - any other verification status code: the proof of timestamp is not ready or invalid
          enum:
          - VERIFIED
          - TX_NOT_SENT
          - TX_NOT_CONFIRMED
          - INVALID_PROOF
          - TX_NOT_FOUND
          - TX_MISMATCH_RECEIPT
          - INVALID_SIGNATURE
          type: string
        text:
          description: Proof receipt verification status text giving more insight
            about verification errors.
          type: string
        timestamp:
          description: |
            Proven timestamp of the data (for a data anchor) or of the signature (for a signature anchor).<br>
            This is the time of the Bitcoin block into which the anchoring process occurred (in milliseconds since Unix epoch).
          example: 1620294758688
          format: int64
          type: integer
        confirmations:
          description: Number of confirmations of the Bitcoin block into which the
            anchoring process occurred.
          example: 6
          format: int32
          type: integer
        timestampVerificationStatus:
          $ref: '#/components/schemas/timestampVerificationStatus'
        signatureVerificationStatus:
          $ref: '#/components/schemas/signatureVerificationStatus'
        identityVerificationStatus:
          $ref: '#/components/schemas/identityVerificationStatus'
      type: object
    timestampVerificationStatus:
      example:
        code: VERIFIED
        text: text
        confirmations: 6
        timestamp: 1620294758688
      properties:
        code:
          description: |
            Timestamp verification status code:
            - VERIFIED: success: the proof receipt is verified<br>
            The receipt format is valid, the transaction is present in the Bitcoin blockchain and confirmed at least once, the receipt contains a valid Merkle proof linking its `targetHash` property to the transaction's `OP_RETURN` field.<br>
            The creation time and the number of confirmation of the block containing the transaction is returned in the `timestamp` and `confirmations` properties.<br>
            Any data whose SHA256 hash matches the proof receipt's `targetHash` is proven to exist at that time and has not been modified since.<br>
            - TX_NOT_SENT: warning: the transaction has not yet been sent to the blockchain (ie. the data or the signature has not yet been anchored)
            - TX_NOT_CONFIRMED: warning: the transaction is not yet confirmed by the blockchain (ie. not yet included in a block)
            - TX_NOT_FOUND: error: the receipt's `anchors` property does not include a valid Bitcoin transaction
            - INVALID_PROOF: error: the receipt's `proof` property is not a valid Merkle proof
            - TX_MISMATCH_RECEIPT: error: the receipt's `merkleRoot` property does not match the transaction's `OP_RETURN` field
          enum:
          - VERIFIED
          - TX_NOT_SENT
          - TX_NOT_CONFIRMED
          - INVALID_PROOF
          - TX_NOT_FOUND
          - TX_MISMATCH_RECEIPT
          type: string
        text:
          description: Timestamp verification status text giving more insight about
            verification errors.
          type: string
        timestamp:
          description: |
            Proven timestamp of the data (for a data anchor) or of the signature (for a signature anchor).<br>
            This is the time of the Bitcoin block into which the anchoring process occurred (in milliseconds since Unix epoch).
          example: 1620294758688
          format: int64
          type: integer
        confirmations:
          description: Number of confirmations of the Bitcoin block into which the
            anchoring process occurred.
          example: 6
          format: int32
          type: integer
      type: object
    signatureVerificationStatus:
      example:
        code: VERIFIED
        text: text
      properties:
        code:
          description: |
            Signature verification status code:
            - VERIFIED: success: the receipt's `signature` property is a valid signature of `signedHash`,
            or, if any of `signedIdentity` or `signedIssuerDomain` is provided, a valid signature of
            SHA256(`signedHash` + `signedIdentity` + `signedIssuerDomain`) using the public key `pubKey`
            - SIGNATURE_MISMATCH_RECEIPT: error: the receipt's `targetHash` does not match the SHA256 hash of `signature`
            - INVALID_SIGNATURE: error: the receipt's `signature` property is invalid
          enum:
          - VERIFIED
          - INVALID_SIGNATURE
          - SIGNATURE_MISMATCH_RECEIPT
          type: string
        text:
          description: Signature verification status text (gives more insights about
            the verification process).
          type: string
      type: object
    identityVerificationStatus:
      example:
        code: VERIFIED
        certificates:
        - subject:
            ST: Britanny
            C: FR
            OU: Sales Dept.
            EMAILADDRESS: john.doe@acme.com
            CN: John Doe
            L: Rennes
            O: ACME Corp.
          issuer:
            ST: Britanny
            C: FR
            OU: Sales Dept.
            EMAILADDRESS: john.doe@acme.com
            CN: John Doe
            L: Rennes
            O: ACME Corp.
        - subject:
            ST: Britanny
            C: FR
            OU: Sales Dept.
            EMAILADDRESS: john.doe@acme.com
            CN: John Doe
            L: Rennes
            O: ACME Corp.
          issuer:
            ST: Britanny
            C: FR
            OU: Sales Dept.
            EMAILADDRESS: john.doe@acme.com
            CN: John Doe
            L: Rennes
            O: ACME Corp.
        identity:
          commonName: John Doe
          country: FR
          organization: ACME Corp.
          locality: Rennes
          organizationalUnit: Sales Dept.
        text: text
        key:
          name: John Doe key
          expiration: 1569542400000
          revokedAt: 1569542400000
          pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          status: valid
      properties:
        code:
          description: |
            Identity verification status code:
            - VERIFIED: success: the signature key is controlled by the identity server (ie. the server provided a valid proof of ownership of the key),<br>
            and/or the signature key matches an identity on the identity server (ie. the server claimed the signer identity),<br>
            and/or the identity is signed (ie. the signer claimed his identity by including it in the signed data),<br>
            and/or the signed identity matches the one on the identity server (both the signer and the identity server claim the identity)
            - HTTP_ERROR: error: the identity URL cannot be called or returned an HTTP error other than 404
            - IDENTITY_NOT_FOUND: error: the key does not match any identity on the identity server (ie. the identity URL returned a HTTP error 404)
            - IDENTITY_MISMATCH: error: the signed identity mismatches the identity on the identity server
            - INVALID_SIGNATURE: error: the identity server returned an invalid signature (ie. the server failed to provide a valid proof of ownership of the key)
            - DEPRECATED_KEY: error: the key expired or was revoked before the signature timestamp
          enum:
          - VERIFIED
          - HTTP_ERROR
          - IDENTITY_NOT_FOUND
          - IDENTITY_MISMATCH
          - INVALID_SIGNATURE
          - DEPRECATED_KEY
          type: string
        text:
          description: Identity verification status text (gives more insights about
            the verification process).
          type: string
        certificates:
          description: Array of subjects and issuers of the certificates extracted
            from the identity URL's TLS certificate.
          items:
            $ref: '#/components/schemas/X509SubjectIssuer'
          type: array
        identity:
          $ref: '#/components/schemas/identity'
        signedIdentity:
          $ref: '#/components/schemas/signedIdentity'
        key:
          $ref: '#/components/schemas/key'
      type: object
    X509SubjectIssuer:
      example:
        subject:
          ST: Britanny
          C: FR
          OU: Sales Dept.
          EMAILADDRESS: john.doe@acme.com
          CN: John Doe
          L: Rennes
          O: ACME Corp.
        issuer:
          ST: Britanny
          C: FR
          OU: Sales Dept.
          EMAILADDRESS: john.doe@acme.com
          CN: John Doe
          L: Rennes
          O: ACME Corp.
      properties:
        subject:
          $ref: '#/components/schemas/X500Name'
        issuer:
          $ref: '#/components/schemas/X500Name'
      type: object
    X500Name:
      description: X500 Distinguished Name.
      example:
        ST: Britanny
        C: FR
        OU: Sales Dept.
        EMAILADDRESS: john.doe@acme.com
        CN: John Doe
        L: Rennes
        O: ACME Corp.
      properties:
        C:
          description: Country code
          example: FR
          type: string
        ST:
          description: State or Province
          example: Britanny
          type: string
        L:
          description: Locality
          example: Rennes
          type: string
        O:
          description: Organization
          example: ACME Corp.
          type: string
        OU:
          description: Organizational Unit
          example: Sales Dept.
          type: string
        CN:
          description: Common Name
          example: John Doe
          type: string
        EMAILADDRESS:
          description: Email address
          example: john.doe@acme.com
          type: string
    identity:
      description: Signer's identity as returned by the identity server, provided
        as a set of X.500 attributes (see https://www.ietf.org/rfc/rfc4519.txt).
      example:
        commonName: John Doe
        country: FR
        organization: ACME Corp.
        locality: Rennes
        organizationalUnit: Sales Dept.
      properties:
        commonName:
          description: commonName (CN) (2.5.4.3)
          example: John Doe
          type: string
        organization:
          description: organizationName (O) (2.5.4.10)
          example: ACME Corp.
          type: string
        organizationalUnit:
          description: organizationalUnitName (OU) (2.5.4.11)
          example: Sales Dept.
          type: string
        locality:
          description: localityName (L) (2.5.4.7)
          example: Rennes
          type: string
        country:
          description: countryName (C) (2.5.4.6)
          example: FR
          type: string
      required:
      - commonName
      type: object
    signedIdentity:
      allOf:
      - $ref: '#/components/schemas/identity'
      description: Signed identity as included in the signed data, provided as a set
        of X.500 attributes (see https://www.ietf.org/rfc/rfc4519.txt).
    key:
      description: Key information.
      example:
        name: John Doe key
        expiration: 1569542400000
        revokedAt: 1569542400000
        pubKey: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
        status: valid
      properties:
        name:
          description: Key name.
          example: John Doe key
          type: string
        pubKey:
          description: Public key (bitcoin address when using BIP39 keys).
          example: 1Ddk3zx55biVKXodadBVbRC5txWG7YwGAx
          type: string
        status:
          description: |
            Key status:
            - `valid`: the key is valid and can be used to sign
            - `expired`: the key expired at `expiration`
            - `revoked`: the key was revoked at `revokedAt`
          enum:
          - valid
          - expired
          - revoked
          example: valid
          type: string
        expiration:
          description: |
            Key expiration date (Unix ms timestamp).
            <br>Note that this property is not returned if the key has no expiration date.
          example: 1569542400000
          format: int64
          type: integer
        revokedAt:
          description: |
            Key revocation date (Unix ms timestamp).
            <br>Note that this property is not returned if the key is not yet revoked.
          example: 1569542400000
          format: int64
          type: integer
      type: object
    token:
      example:
        token: token
      properties:
        token:
          description: The JWT token value to provide in the `Bearer` scheme of the
            `Authorization` header.
          type: string
      type: object
    tokens:
      example:
        tokens:
        - tokens
        - tokens
      properties:
        tokens:
          description: Array of tokens.
          items:
            type: string
          type: array
      required:
      - tokens
      type: object
    credits:
      example:
        signCredits: 1234
        smsCredits: 1234
        credits: 1234
        sealCredits: 1234
        signatureRequestCredits: 1234
      properties:
        credits:
          description: The remaining number of timestamp credits of the authenticated
            user's account.
          example: 1234
          type: integer
        sealCredits:
          description: The remaining number of seal credits of the authenticated user's
            account.
          example: 1234
          type: integer
        signCredits:
          description: The remaining number of signature credits of the authenticated
            user's account.
          example: 1234
          type: integer
        signatureRequestCredits:
          description: The remaining number of signature request credits of the authenticated
            user's account.
          example: 1234
          type: integer
        smsCredits:
          description: The remaining number of SMS credits of the authenticated user's
            account.
          example: 1234
          type: integer
      type: object
    callbackSecret:
      example:
        secret: secret
      properties:
        secret:
          description: The secret used to sign the callback.
          type: string
      type: object
  securitySchemes:
    BasicAuth:
      description: |
        Basic authentication over `HTTPS`.<br>
        You must provide `Base64("{email}:{password}")` in the `Basic` scheme of the `Authorization` header.
      scheme: basic
      type: http
    JWTAuth:
      description: |
        JWT authentication over `HTTPS`.<br>
        You must provide a JWT token value in the `Bearer` scheme of the `Authorization` header.
      in: header
      name: Authorization
      type: apiKey
x-samples-languages:
- curl
- javascript
- node
- java
- python
- php

